<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Apple</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-31T05:28:19.147Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Ping</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础语法</title>
    <link href="http://example.com/2022/07/28/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2022/07/28/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2022-07-28T08:19:17.000Z</published>
    <updated>2022-07-31T05:28:19.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><p>vscode默认为UTF-8编码，使用时候右下角改为GBK在进行javac的时候就不会中文报错</p></blockquote><p>中文操作系统默认的编码是GBK，<strong>javac命令不指定-encoding选项时，以系统默认的编码GBK来解析源代码文件，源代码文件的编码如果不是GBK，那就会报错</strong>。 如果源代码是UTF-8编码，那javac命令要指定-encoding： javac -encoding UTF-8 demo01.java</p><h2 id="Java面向对象的三大特性"><a href="#Java面向对象的三大特性" class="headerlink" title="Java面向对象的三大特性"></a>Java面向对象的三大特性</h2><ul><li>封装</li><li>继承</li><li>多态</li></ul><h2 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h2><h3 id="字符型-char"><a href="#字符型-char" class="headerlink" title="字符型(char)"></a>字符型(char)</h3><p>char最大的优势也就在于中文处理。</p><p>java使用的是unicode这种十六进制的编码,可以包括任意的文字内容。</p><h3 id="布尔型-boolean"><a href="#布尔型-boolean" class="headerlink" title="布尔型(boolean)"></a>布尔型(boolean)</h3><p>布尔型描述的是逻辑的处理结果。</p><p>Java的布尔类型的取值范围只有：true，false。</p><p>定义布尔型数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><h3 id="String字符串-String"><a href="#String字符串-String" class="headerlink" title="String字符串(String)"></a>String字符串(String)</h3><p>字符串之间可以通过 <code>+</code> 来进行连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;hello&quot;</span>;<span class="comment">//注意S是大写</span></span><br><span class="line">str = str + <span class="string">&quot; world&quot;</span>;</span><br><span class="line">str += <span class="string">&quot; !!!&quot;</span>;<span class="comment">//hello world !!!</span></span><br></pre></td></tr></table></figure><p>在Java语言里面，两个不同数据类型进行计算，范围小的数据类型自动转型为范围大的数据类型，若计算类型包裹String类型，则所有的类型无条件先变为String,如果有“+”表示的就是字符串连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">20.1</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line">String str = x + y;<span class="comment">//20.110</span></span><br></pre></td></tr></table></figure><p>在描述字符串的时候也可以使用转义字符进行一些处理，例如:TAB ( t)、”(&quot;)、’(&#39;)、换行、( \n)、(\)。</p><h2 id="Java运算符"><a href="#Java运算符" class="headerlink" title="Java运算符"></a>Java运算符</h2><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p>·&amp;和|两个运算符可以进行位运算与逻辑运算；</p><p> |-在进行逻辑运算的时候所有的判断条件都要执行；</p><p> |-在进行位运算的时候只是针对于当前的数据进行与和或处理；</p><p>· 在逻辑运算上还可以使用&amp;&amp;、||；</p><p> |-&amp;&amp;:在若干个条件判断的时候，如果前面的条件返回了false,后续所有的条件都不再判断最终的结果就是false;</p><p> |-||：在若干个条件判断的时候，如果前面的条件返回了true,后续条件不再执行，最终就是true.</p><h3 id="条件运算符-三元运算符"><a href="#条件运算符-三元运算符" class="headerlink" title="条件运算符(三元运算符)"></a>条件运算符(三元运算符)</h3><p>该运算符有3个操作数，并且需要判断布尔表达式的值。</p><p>作用：判断哪个值应该赋值给变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//variable x = (expression) ? value if true : value if false</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> a , b;</span><br><span class="line">      a = <span class="number">10</span>;</span><br><span class="line">      <span class="comment">// 如果 a 等于 1 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">      b = (a == <span class="number">1</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">      System.out.println( <span class="string">&quot;Value of b is : &quot;</span> +  b );<span class="comment">//30</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 如果 a 等于 10 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">      b = (a == <span class="number">10</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">      System.out.println( <span class="string">&quot;Value of b is : &quot;</span> + b );<span class="comment">//20</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Value of b is : <span class="number">30</span></span><br><span class="line">Value of b is : <span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>所有的关系运算返回的判断结果都是布尔型数据</p><p>尝试像C语言一样使用<code>int</code>型数据类型接收结果会报错：<code>boolean无法转换为int</code></p><h3 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符/"></a>instanceof 运算符/</h3><p>*该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( Object reference variable ) instanceof  (class/interface type)</span><br></pre></td></tr></table></figure><p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name = &quot;James&quot;;</span><br><span class="line">boolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真</span><br></pre></td></tr></table></figure><h3 id="Java运算符优先级"><a href="#Java运算符优先级" class="headerlink" title="Java运算符优先级"></a>Java运算符优先级</h3><table><thead><tr><th align="left">类别</th><th align="left">操作符</th><th align="left">关联性</th></tr></thead><tbody><tr><td align="left">后缀</td><td align="left">() [] . (点操作符)</td><td align="left">左到右</td></tr><tr><td align="left">一元</td><td align="left">expr++ expr–</td><td align="left">从左到右</td></tr><tr><td align="left">一元</td><td align="left">++expr –expr + - ～ ！</td><td align="left">从右到左</td></tr><tr><td align="left">乘性</td><td align="left">* /％</td><td align="left">左到右</td></tr><tr><td align="left">加性</td><td align="left">+ -</td><td align="left">左到右</td></tr><tr><td align="left">移位</td><td align="left">&gt;&gt; &gt;&gt;&gt;  &lt;&lt;</td><td align="left">左到右</td></tr><tr><td align="left">关系</td><td align="left">&gt; &gt;= &lt; &lt;=</td><td align="left">左到右</td></tr><tr><td align="left">相等</td><td align="left">== !=</td><td align="left">左到右</td></tr><tr><td align="left">按位与</td><td align="left">＆</td><td align="left">左到右</td></tr><tr><td align="left">按位异或</td><td align="left">^</td><td align="left">左到右</td></tr><tr><td align="left">按位或</td><td align="left">|</td><td align="left">左到右</td></tr><tr><td align="left">逻辑与</td><td align="left">&amp;&amp;</td><td align="left">左到右</td></tr><tr><td align="left">逻辑或</td><td align="left">| |</td><td align="left">左到右</td></tr><tr><td align="left">条件</td><td align="left">？：</td><td align="left">从右到左</td></tr><tr><td align="left">赋值</td><td align="left">= + = - = * = / =％= &gt;&gt; = &lt;&lt; =＆= ^ = | =</td><td align="left">从右到左</td></tr><tr><td align="left">逗号</td><td align="left">，</td><td align="left">左到右</td></tr></tbody></table><h3 id="Java程序逻辑控制"><a href="#Java程序逻辑控制" class="headerlink" title="Java程序逻辑控制"></a>Java程序逻辑控制</h3><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 布尔表达式; 更新) &#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环执行的次数是在执行前就确定的。语法格式如下：</p><p>for(初始化; 布尔表达式; 更新) {    //代码语句 }</p><p>语句先后顺序</p><ol><li>初始化 ；</li><li>判断布尔表达式，为false会退出循环；为true会执行代码语句 ；</li><li>更新 ；</li><li>回到第二部 ；</li></ol><h3 id="java增强for循环"><a href="#java增强for循环" class="headerlink" title="java增强for循环"></a>java增强for循环</h3><p>版本：Java5及以上版本才有</p><p><strong>语法格式如下:</strong></p><p><code>for(声明语句 : 表达式) &#123;   //代码句子 &#125;</code></p><p><strong>声明语句：</strong>声明新的和数组元素的类型匹配的局部变量。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p><p><strong>表达式：</strong>表达式是要访问的数组名，或者是返回值为数组的方法。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="Test-java-文件代码："><a href="#Test-java-文件代码：" class="headerlink" title="Test.java 文件代码："></a>Test.java 文件代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> [] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> x : numbers )&#123;</span><br><span class="line">         System.out.print( x );</span><br><span class="line">         System.out.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      String [] names =&#123;<span class="string">&quot;James&quot;</span>, <span class="string">&quot;Larry&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Lacy&quot;</span>&#125;;</span><br><span class="line">      <span class="keyword">for</span>( String name : names ) &#123;</span><br><span class="line">         System.out.print( name );</span><br><span class="line">         System.out.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>输出结果</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10,20,30,40,50,</span><br><span class="line">James,Larry,Tom,Lacy,</span><br></pre></td></tr></table></figure><h3 id="Java程序逻辑控制：Swith开关语句"><a href="#Java程序逻辑控制：Swith开关语句" class="headerlink" title="Java程序逻辑控制：Swith开关语句"></a>Java程序逻辑控制：Swith开关语句</h3><p>与C语言不同：可判断字符串(String)。</p><h3 id="break-关键字"><a href="#break-关键字" class="headerlink" title="break 关键字"></a>break 关键字</h3><p>break 用在循环或者 switch 语句中，可跳出最内层的整个语句块，并继续执行该语句块下面的语句。</p><h3 id="continue-关键字"><a href="#continue-关键字" class="headerlink" title="continue 关键字"></a>continue 关键字</h3><p>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</p><p>注意：在 for 循环中，continue 语句使程序立即跳转到更新语句。</p><h3 id="Java语言支持一些特殊的转义字符序列。"><a href="#Java语言支持一些特殊的转义字符序列。" class="headerlink" title="Java语言支持一些特殊的转义字符序列。"></a>Java语言支持一些特殊的转义字符序列。</h3><table><thead><tr><th align="left">符号</th><th align="left">字符含义</th></tr></thead><tbody><tr><td align="left">\n</td><td align="left">换行 (0x0a)</td></tr><tr><td align="left">\r</td><td align="left">回车 (0x0d)</td></tr><tr><td align="left">\f</td><td align="left">换页符(0x0c)</td></tr><tr><td align="left">\b</td><td align="left">退格 (0x08)</td></tr><tr><td align="left">\0</td><td align="left">空字符 (0x0)</td></tr><tr><td align="left">\s</td><td align="left">空格 (0x20)</td></tr><tr><td align="left">\t</td><td align="left">制表符</td></tr><tr><td align="left">&quot;</td><td align="left">双引号</td></tr><tr><td align="left">&#39;</td><td align="left">单引号</td></tr><tr><td align="left">\</td><td align="left">反斜杠</td></tr><tr><td align="left">\ddd</td><td align="left">八进制字符 (ddd)</td></tr><tr><td align="left">\uxxxx</td><td align="left">16进制Unicode字符 (xxxx)</td></tr></tbody></table><h2 id="方法的定义与使用"><a href="#方法的定义与使用" class="headerlink" title="方法的定义与使用"></a>方法的定义与使用</h2><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>在一个类中，多个方法的方法名相同，但是参数列表不同。</p><p>同一个方法名称但是可以根据调用时传递的不同参数的类型或个数实现不同方法体的调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> resultA = sum(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">int</span> resultB = sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">        <span class="keyword">double</span> resultC = sum(<span class="number">10.2</span>,<span class="number">20.3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;resultA=&quot;</span>+resultA);</span><br><span class="line">        System.out.println(<span class="string">&quot;resultB=&quot;</span>+resultB);</span><br><span class="line">        System.out.println(<span class="string">&quot;resultC=&quot;</span>+resultC);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y + z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="面向对象简介"><a href="#面向对象简介" class="headerlink" title="面向对象简介"></a>面向对象简介</h3><h4 id="三个主要特征"><a href="#三个主要特征" class="headerlink" title="三个主要特征"></a>三个主要特征</h4><ul><li>封装性：内部的操作对外部不可见;</li><li>继承性：在已有结构的基础上继续进行功能的扩充；<code>很像游戏mod</code></li><li>多态性：是在继承性的基础上扩充而来的概念，指得是类型的转换处理。(方法重载就体现多态性)</li></ul><h4 id="三个步骤："><a href="#三个步骤：" class="headerlink" title="三个步骤："></a>三个步骤：</h4><ul><li>OOA：面向对象分析；(Object-oriented analysis)</li><li>OOD：面向对象设计；(Object-oriented design)</li><li>OOP：面向对象编程；(Object-oriented programming)</li></ul><h3 id="类与对象简介"><a href="#类与对象简介" class="headerlink" title="类与对象简介"></a>类与对象简介</h3><p><strong>类是对某一事物的共性的抽象概念，而对象描述的是一个具体的产物。</strong></p><p><strong>类是一个模板，而对象才是类可以使用的实例，先有类再有对象。</strong></p><p>类之中一般有两个组成：</p><ul><li>成员属性(Field)：就是变量 ;</li><li>操作方法(Method)：定义对象具有的处理行为；(很像函数)</li></ul><h3 id="类与对象的定义与使用"><a href="#类与对象的定义与使用" class="headerlink" title="类与对象的定义与使用"></a>类与对象的定义与使用</h3><p><strong>类名的首字母必须大写</strong></p><p>类是一个独立的结构体，所以需要使用<code>class</code>来进行定义(这点不是很懂)</p><p>class类用来描述一个类的类型，可以通过反射api访问它，在运行时获得一个类型有什么字段、函数、实现了什么接口等，并且动态创建它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;<span class="comment">//定义一个类</span></span><br><span class="line">    String name ;</span><br><span class="line">    <span class="keyword">int</span> age ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;、年龄：&quot;</span> + age) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个类之中定义有两个属性<code>name</code>、<code>age</code>和一个方法<code>tell()</code></p><p>如果想要使用这个类需要使用对象来完成，对象的产生需要使用下面语法格式完成。</p><h4 id="声明对象"><a href="#声明对象" class="headerlink" title="声明对象"></a>声明对象</h4><ul><li><p>声明并实例化对象：类名称 对象名称 = new 类名称();</p></li><li><p>分步骤完成：</p><ul><li>声明对象：类名称 对象名称 = null；</li><li>实例化对象：对象名称 = new 类名称()。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;<span class="comment">//定义一个类</span></span><br><span class="line">    String name ;</span><br><span class="line">    <span class="keyword">int</span> age ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;、年龄：&quot;</span> + age) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person per = <span class="keyword">new</span> Person() ;<span class="comment">//声明并实例化对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类的调用"><a href="#类的调用" class="headerlink" title="类的调用"></a>类的调用</h4><ul><li><p>调用类中属性：<code>实例化对象.成员属性</code></p></li><li><p>调用类中方法：<code>实例化对象.方法名称()</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名:&quot;</span>+ name +<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;年龄：&quot;</span>+ age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Person per = <span class="keyword">new</span> Person();<span class="comment">//声明并实例化对象</span></span><br><span class="line">        per.age=<span class="number">18</span>;</span><br><span class="line">        per.name = <span class="string">&quot;kouber&quot;</span>;</span><br><span class="line">        per.tell();<span class="comment">//进行方法的调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">姓名:kouber</span><br><span class="line">年龄：<span class="number">18</span></span><br></pre></td></tr></table></figure><p><strong>如果没有对属性内容设置，则该数据内容为该数据类型的默认值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名:&quot;</span>+ name +<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;年龄：&quot;</span>+ age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Person per = <span class="keyword">new</span> Person();<span class="comment">//声明并实例化对象</span></span><br><span class="line">        per.tell() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">姓名:<span class="keyword">null</span></span><br><span class="line">年龄：<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="对象的内存分析"><a href="#对象的内存分析" class="headerlink" title="对象的内存分析"></a>对象的内存分析</h3><h4 id="堆栈内存"><a href="#堆栈内存" class="headerlink" title="堆栈内存"></a>堆栈内存</h4><ul><li>堆内存：保存对象的具体信息，堆内存空间的开辟是通过new完成的。</li><li>栈内存：保存的是一块堆内存的地址，即：通过地址找到堆内存，然后找到对象内容</li></ul><p><strong>声明</strong>可以理解为在栈内存空间里面有了一个名称(但还没有堆内存的指向，就是一个变量名字，没什么卵用)</p><p><strong>(有声明的)实例化</strong>则是在堆中开辟一块空间并将名称指向这片空间</p><p><strong>new的出现即为新的堆内存的出现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名:&quot;</span>+ name +<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;年龄：&quot;</span>+ age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Person perA = <span class="keyword">new</span> Person();<span class="comment">//声明并实例化对象</span></span><br><span class="line">        <span class="comment">//堆和栈中都开辟了空间</span></span><br><span class="line">        </span><br><span class="line">        Person perB = <span class="keyword">null</span> ;<span class="comment">//声明但未实例化对象</span></span><br><span class="line">        <span class="comment">//栈中出现了perB，但是其指向为空，此时并未新建堆空间</span></span><br><span class="line">        perB = <span class="keyword">new</span> Person() ;<span class="comment">//实例化对象</span></span><br><span class="line">        <span class="comment">//new开辟了一块新的堆内存空间并将栈中的perB指向了该空间的地址    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">姓名:<span class="keyword">null</span></span><br><span class="line">年龄：<span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>对象必须实例化之后才能使用否则无法使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名:&quot;</span>+ name +<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;年龄：&quot;</span>+ age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Person per = <span class="keyword">null</span> ;<span class="comment">//声明但未实例化对象</span></span><br><span class="line">        per.age=<span class="number">18</span>;<span class="comment">//报错：java.lang.NullPointerException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象引用传递分析"><a href="#对象引用传递分析" class="headerlink" title="对象引用传递分析"></a>对象引用传递分析</h3><p>类本身属于引用数据类型</p><p><strong>引用传递的本质：</strong>同一块堆内存空间可以被不同的栈内存所指向，也可以更换指向。</p><h4 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h4><p><code>perA</code>和<code>perB</code>指向的是同一块堆内存空间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名:&quot;</span>+ name +<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;年龄：&quot;</span>+ age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Person perA = <span class="keyword">new</span> Person();<span class="comment">//声明并实例化对象</span></span><br><span class="line">        perA.age=<span class="number">18</span>;</span><br><span class="line">        perA.name = <span class="string">&quot;kouber&quot;</span>;</span><br><span class="line">        Person perB = perA ;<span class="comment">//引用传递</span></span><br><span class="line">        perB.age = <span class="number">80</span> ;</span><br><span class="line">        perA.tell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">姓名:kouber</span><br><span class="line">年龄：<span class="number">80</span></span><br></pre></td></tr></table></figure><h4 id="发生在方法上的引用传递"><a href="#发生在方法上的引用传递" class="headerlink" title="发生在方法上的引用传递"></a>发生在方法上的引用传递</h4><p>这个时候一定要观察方法的参数类型，同时也要观察方法的执行过程。</p><p><code>temp</code>和<code>per</code>指向的是同一块内存空间</p><p><code>change()</code>方法传递的是<code>per</code>指向的堆内存空间的地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名:&quot;</span>+ name +<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;年龄：&quot;</span>+ age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Person per = <span class="keyword">new</span> Person();<span class="comment">//声明并实例化对象</span></span><br><span class="line">        per.age=<span class="number">18</span>;</span><br><span class="line">        per.name = <span class="string">&quot;kouber&quot;</span>;</span><br><span class="line">        change(per) ;</span><br><span class="line">        per.tell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">change</span><span class="params">(Person temp)</span> </span>&#123;</span><br><span class="line">    temp.age = <span class="number">80</span> ;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">姓名:kouber</span><br><span class="line">年龄：<span class="number">80</span></span><br></pre></td></tr></table></figure><h3 id="垃圾空间"><a href="#垃圾空间" class="headerlink" title="垃圾空间"></a>垃圾空间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person perA = <span class="keyword">new</span> Person() ;</span><br><span class="line">Person perB = <span class="keyword">new</span> Person() ;</span><br><span class="line">perA = perB ;</span><br></pre></td></tr></table></figure><p><code>perA</code>指向了<code>perB</code>那么<code>perA</code>本身指向的堆内存空间就被丢弃了，这片空间就是垃圾空间。</p><p>垃圾空间就是没有任何栈内存指向的堆内存空间，所有的垃圾将被GC(Garbage Collector、垃圾收集器)定期进行回收并且释放无用空间，但是如果垃圾过多，一定将影响到GC的处理性能，从而降低整体的程序性能，实际开发中尽量少产生垃圾空间。</p><h2 id="深入分析类与对象"><a href="#深入分析类与对象" class="headerlink" title="深入分析类与对象"></a>深入分析类与对象</h2><h3 id="成员属性封装"><a href="#成员属性封装" class="headerlink" title="成员属性封装"></a>成员属性封装</h3><p>类中属性可通过其他类利用对象进行调用的。</p><p>利用private对属性进行封装处理后，类内部的属性只对内部可见，对外部不可见，即不能在类外直接修改类private属性，但可调用类内修改private属性的方法进行修改。</p><h3 id="构造方法与匿名对象"><a href="#构造方法与匿名对象" class="headerlink" title="构造方法与匿名对象"></a>构造方法与匿名对象</h3><h4 id="构造方法：对类的对象的属性进行初始化"><a href="#构造方法：对类的对象的属性进行初始化" class="headerlink" title="构造方法：对类的对象的属性进行初始化"></a>构造方法：对类的对象的属性进行初始化</h4><p>定义要求如下：</p><ul><li><strong>构造方法名称必须与类名称一致</strong></li><li><strong>构造方法不允许设置任何的返回值类型；即没有返回值定义</strong></li><li><strong>构造方法是在使用关键字new实例化对象的时候自动调用的</strong></li></ul><p>类中一定会有一个构造方法，如果没有明确定义，系统会自动创建一个无参的构造方法</p><h4 id="构造方法如何使用"><a href="#构造方法如何使用" class="headerlink" title="构造方法如何使用"></a>构造方法如何使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span> <span class="params">(String t)</span></span>&#123;<span class="comment">//定义有参构造</span></span><br><span class="line">        title = t;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String t)</span> </span>&#123;</span><br><span class="line">        title = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;<span class="comment">//定义一个类</span></span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> <span class="params">(Message msg,<span class="keyword">int</span> a)</span></span>&#123; <span class="comment">//定义有参构造</span></span><br><span class="line">        name = msg.getTitle();<span class="comment">//为类中的属性赋值（初始化）</span></span><br><span class="line">        age = a;<span class="comment">//为类中的属性赋值（初始化）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Message(name + <span class="string">&quot; : &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span>+ name +<span class="string">&quot;、年龄：&quot;</span> + age);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; <span class="comment">//主类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Message msg = <span class="keyword">new</span> Message(<span class="string">&quot;mldn&quot;</span>);<span class="comment">//使用构造方法进行初始化赋值</span></span><br><span class="line">        Person per = <span class="keyword">new</span> Person(msg,<span class="number">20</span>);<span class="comment">//使用构造方法进行初始化赋值</span></span><br><span class="line">        msg = per.getInfo();</span><br><span class="line">        System.out.println(msg.getTitle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">mldn : <span class="number">20</span></span><br></pre></td></tr></table></figure><h4 id="匿名对象的使用"><a href="#匿名对象的使用" class="headerlink" title="匿名对象的使用"></a>匿名对象的使用</h4><p>用完直接扔</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;<span class="comment">//定义一个类</span></span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> <span class="params">(String name,<span class="keyword">int</span> a)</span></span>&#123; <span class="comment">//定义有参构造</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;<span class="comment">//为类中的属性赋值（初始化）</span></span><br><span class="line">        age = a;<span class="comment">//为类中的属性赋值（初始化）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span>+ name +<span class="string">&quot;、年龄：&quot;</span> + age);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">&quot;Kouber&quot;</span>，<span class="number">18</span>).tell;<span class="comment">//进行方法的调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">姓名：Kouber、年龄：<span class="number">18</span></span><br></pre></td></tr></table></figure><p>此对象没有引用(没有名字)，使用后会变成垃圾，所有的垃圾将被GC进行回收与释放</p><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><h3 id="使用this调用方法"><a href="#使用this调用方法" class="headerlink" title="使用this调用方法"></a>使用this调用方法</h3><p>除了调用属性之外，this也可以实现方法的调用，但是对于方法的调用就必须考虑构造与普通方法</p><ul><li>构造方法调用<code>this()</code>;使用关键字new实例化对象的时候才会调用构造方法；</li><li>普通方法调用<code>this.方法名称()</code>；</li></ul><h3 id="this实现构造方法互相调用"><a href="#this实现构造方法互相调用" class="headerlink" title="this实现构造方法互相调用"></a>this实现构造方法互相调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;**************&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>();<span class="comment">//调用本类中的无参构造</span></span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(name);<span class="comment">//调用本类中的有参构造</span></span><br><span class="line"><span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;姓名： &quot;</span>+<span class="keyword">this</span>.name+<span class="string">&quot;  年龄：&quot;</span>+<span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Person().getInfo());</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>).getInfo());</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>).getInfo());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需要注意以下三点</strong></p><ul><li><strong>“this()”的语句只允许放在构造方法的首行</strong></li><li>在构造方法中能调用普通方法，反过来普通方法不能调用构造方法；**<code>this()</code>不能在普通方法中使用**</li><li>构造方法互相调用时请保留有程序的出口，别形成死循环；</li></ul><h2 id="简单Java类"><a href="#简单Java类" class="headerlink" title="简单Java类"></a>简单Java类</h2><p>核心开发结构：</p><ul><li>类名称一定要有意义，可以明确的描述某一类事物；</li><li><strong>类之中的所有属性都必须使用private进行封装</strong>，同时封装后的属性必须要提供有setter、getter方法；</li><li>类之中可以提供有无数多个构造方法，但是<strong>必须要保留有无参构造方法</strong></li><li><strong>类之中不允许出现任何的输出语句，所有内容的获取必须返回</strong></li><li>【非必须】可以提供有一个获取对象详细信息的方法，暂时将此方法名称定义为getInfo()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> deptno ;</span><br><span class="line">    <span class="keyword">private</span> String dname ;</span><br><span class="line">    <span class="keyword">private</span> String loc;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(<span class="keyword">long</span> deptno,String dname,String loc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno ;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname ;</span><br><span class="line">        <span class="keyword">this</span>.loc = loc ; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【部门信息】部门编号：&quot;</span> + <span class="keyword">this</span>.deptno + <span class="string">&quot;、部门名称 &quot;</span> + <span class="keyword">this</span>.dname + <span class="string">&quot;、部门位置 ：&quot;</span> + <span class="keyword">this</span>.loc ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(<span class="keyword">long</span> deptno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoc</span><span class="params">(String loc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loc = loc ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Dept dept = <span class="keyword">new</span> Dept(<span class="number">10</span>,<span class="string">&quot;技术部&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        System.out.println(dept.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p><strong>所有的static定义的属性和方法都可以在没有实例化对象的前提下使用</strong></p><h4 id="static属性可以由类名称直接调用"><a href="#static属性可以由类名称直接调用" class="headerlink" title="static属性可以由类名称直接调用"></a>static属性可以由类名称直接调用</h4><p><code>类名称.(static)属性 = （赋值）n</code></p><p>static属性虽然定义在类之中，但是其并不受到类实例化对象的控制。</p><ul><li>考虑到公共信息储存的时候才会使用到static属性</li></ul><h4 id="static方法和非static方法调用上的限制"><a href="#static方法和非static方法调用上的限制" class="headerlink" title="static方法和非static方法调用上的限制"></a>static方法和非static方法调用上的限制</h4><ul><li><strong>static方法只允许调用static属性或static方法</strong></li><li><strong>非static方法允许调用static属性或static方法</strong></li></ul><p>但在static方法中调用非static方法可以通过对象来调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Demo().print() ; <span class="comment">// 此处Demo后需要加上括号</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;www.pintia.cn&quot;</span>) ;<span class="comment">//www.pintia.cn</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>static</code>只有在回避实例化对象调用并且描述公共属性的情况下才会考虑</strong></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="构造块"><a href="#构造块" class="headerlink" title="构造块"></a>构造块</h3><p>构造代码块：是<strong>给所有的对象进行初始化</strong>，也就是说，所有的对象都会调用一个代码块，只要对象一建立，就会调用这个代码块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    &#123;<span class="comment">//构造代码块</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行无参构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行有参构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Client client = <span class="keyword">new</span> Client(<span class="string">&quot;XXX&quot;</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="comment">//执行构造代码块</span></span><br><span class="line"><span class="comment">//执行有参构造函数</span></span><br></pre></td></tr></table></figure><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>主要目的:静态属性的初始化。</p><p>执行优先级高于非静态的初始化块，它会在类初始化的时候执行一次，执行完成便销毁，它仅能初始化类变量，即<code>static</code>修饰的数据成员</p><p>静态代码块比主方法先执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;静态代码块：最高优先级&quot;</span>) ;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主方法代码块：执行次于静态代码块&quot;</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">执行结果：</span><br><span class="line">静态代码块：最高优先级</span><br><span class="line">主方法代码块：执行次于静态代码块</span><br></pre></td></tr></table></figure><h3 id="非静态代码块"><a href="#非静态代码块" class="headerlink" title="非静态代码块"></a><strong>非静态代码块</strong></h3><p>执行的时候如果有静态初始化块，先执行静态初始化块再执行非静态初始化块，在每个对象生成时都会被执行一次，它可以初始化类的实例变量。非静态初始化块会在构造函数执行时，在构造函数主体代码执行之前被运行。</p><h3 id="代码块执行顺序"><a href="#代码块执行顺序" class="headerlink" title="代码块执行顺序"></a>代码块执行顺序</h3><p><strong>静态代码块—–&gt;非静态代码块——–&gt;构造函数</strong></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义语法"><a href="#定义语法" class="headerlink" title="定义语法"></a>定义语法</h3><ul><li>数组的动态初始化，初始化之后数组每一个元素的保存内容为其对应数据类型的默认值<ul><li>声明并初始化数组：<ul><li>数据类型 数组名称 [] = new 数据类型 [长度] ；</li><li>数据类型 [] 数组名称 = new 数据类型 [长度] ；</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a [] = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">10</span>] ;</span><br><span class="line">        <span class="keyword">int</span> [] b = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">10</span>] ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数组的静态初始化：在数组定义的时候就为其设置好了里面的内容：<ul><li>简化格式：数据类型 数组名称 [] = {数据类型 1，数据类型 2，数据类型 3，···};</li><li>完整格式：数据类型 数组名称 [] = <strong>new 数据类型 [] {数据类型 1，数据类型 2，数据类型 3，···}</strong>; (黑体部分：匿名数组)</li><li>老师强烈建议用完整格式进行数组的初始化</li></ul></li></ul><p>当使用数组下标超出数组范围时候，程序编译会有此报错</p><p><strong>ArrayIndexOutOfBoundsException</strong></p><p>意味数组越界</p><h3 id="求数组长度：-数组名-length"><a href="#求数组长度：-数组名-length" class="headerlink" title="求数组长度： 数组名.length"></a>求数组长度： 数组名.length</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] data = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>] ;</span><br><span class="line">        System.out.print(data.length) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">结果输出：</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="增强型for循环：foreach（迭代输出）"><a href="#增强型for循环：foreach（迭代输出）" class="headerlink" title="增强型for循环：foreach（迭代输出）"></a>增强型for循环：foreach（迭代输出）</h3><p><em>利用foreach的语法结构可以直接自动获取数组中的每一个元素，<strong>避免下标访问</strong></em></p><p><code>for(数据类型 变量 : 数组 | 集合) &#123;&#125;</code></p><p><strong>实质</strong>：自动将数组中每个元素取出用变量<code>temp</code>保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Demo &#123;</span><br><span class="line">public static void main(String args[]) &#123;</span><br><span class="line">int [] data = new int [] &#123;1,2,3,4,5&#125; ;</span><br><span class="line">for (int temp : data) &#123;</span><br><span class="line">System.out.print(temp) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">12345</span><br></pre></td></tr></table></figure><h3 id="引用数据类型内存分析（数组）"><a href="#引用数据类型内存分析（数组）" class="headerlink" title="引用数据类型内存分析（数组）"></a>引用数据类型内存分析（数组）</h3><p>引用数据类型：必须在为之开辟了堆内存空间之后才可以使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] data = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125; ; <span class="comment">//静态初始化</span></span><br><span class="line">        <span class="keyword">int</span> [] temp = data ; <span class="comment">//引用传递</span></span><br><span class="line">        temp [<span class="number">0</span>] = <span class="number">100</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; data.length ; x++) &#123;</span><br><span class="line">            System.out.print(data[x] ) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">100</span> <span class="number">20</span> <span class="number">30</span> </span><br></pre></td></tr></table></figure><p>两者的数据本质上是同一个堆内存里面的数据</p><p><em>由于<strong>数组属于引用类型</strong>，所以一定要为其开辟堆内存空间之后才可以使用，如果现在使用了未开辟空间的数组，会出现<strong>NullPointerException</strong>（数组）</em></p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main &#123;</span><br><span class="line">        <span class="keyword">int</span> [] data = <span class="keyword">null</span> ;</span><br><span class="line">        System.out.print(data[<span class="number">0</span>]) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">正常编译</span><br><span class="line">但是运行会出现**NullPointerException**报错</span><br></pre></td></tr></table></figure><p>因此：数组必须提供有实例化对象才可与使用数组的操作形式进行数组的操作</p><h3 id="方法传递数组"><a href="#方法传递数组" class="headerlink" title="方法传递数组"></a>方法传递数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> data [] = initArray();</span><br><span class="line">        printArray(data);<span class="comment">//传递数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> [] initArray() &#123;</span><br><span class="line">        <span class="keyword">int</span> arr [] = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> arr;<span class="comment">//返回一个数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//要求接受一个int型的数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> temp [])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; temp.length ; x++)&#123;</span><br><span class="line">            System.out.print(temp[x]、) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">1</span>、<span class="number">2</span>、<span class="number">3</span>、<span class="number">4</span>、<span class="number">5</span>、</span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p><strong>定义语法</strong></p><ul><li><p>数组的动态初始化：</p><ul><li>数据类型 [] [] 数组名称 = new 数据类型 [行个数] [列个数] ;</li></ul></li><li><p>数组的静态初始化：</p><ul><li>数据类型 数组名称 [] [] = new 数据类型 [] [] { {数据，数据，···},{数据，数据，···} } ;</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] [] data = <span class="keyword">new</span> <span class="keyword">int</span> [] [] &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125; &#125; ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; data.length ; x ++) &#123; <span class="comment">//这里的data.length = 3 </span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span> ;y &lt; data[x].length ; y ++)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;data[&quot;</span>+x+<span class="string">&quot;][&quot;</span>+y+<span class="string">&quot;]=&quot;</span>+data[x][y]) ;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println() ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">data[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">data[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">2</span></span><br><span class="line">data[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">3</span></span><br><span class="line">data[<span class="number">0</span>][<span class="number">3</span>]=<span class="number">4</span></span><br><span class="line">data[<span class="number">0</span>][<span class="number">4</span>]=<span class="number">5</span></span><br><span class="line"></span><br><span class="line">data[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">data[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">2</span></span><br><span class="line">data[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">3</span></span><br><span class="line"></span><br><span class="line">data[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">5</span></span><br><span class="line">data[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">6</span></span><br><span class="line">data[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">7</span></span><br><span class="line">data[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">8</span></span><br></pre></td></tr></table></figure><p>使用foreach输出该二维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] [] data = <span class="keyword">new</span> <span class="keyword">int</span> [] [] &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125; &#125; ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> temp [] : data) &#123; <span class="comment">//这里的data.length = 3 </span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> num : temp)&#123;</span><br><span class="line">                System.out.print(num + <span class="string">&quot;、&quot;</span>) ;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println() ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">1</span>、<span class="number">2</span>、<span class="number">3</span>、<span class="number">4</span>、<span class="number">5</span>、</span><br><span class="line"><span class="number">1</span>、<span class="number">2</span>、<span class="number">3</span>、</span><br><span class="line"><span class="number">5</span>、<span class="number">6</span>、<span class="number">7</span>、<span class="number">8</span>、</span><br></pre></td></tr></table></figure><p>通过foreach可以看出，二维数组就是数组的嵌套使用</p><h3 id="数组相关类库"><a href="#数组相关类库" class="headerlink" title="数组相关类库"></a>数组相关类库</h3><p>数组排序：*java.until.Arrays.sort(数组名称);*（升序）</p><p>数组拷贝：<em>System.arraycopy(原数组，原数组开始点，目标数组，目标数组开始点，拷贝长度);</em></p><h3 id="方法可变参数"><a href="#方法可变参数" class="headerlink" title="方法可变参数"></a>方法可变参数</h3><ul><li>可变参数，会被编译器转型为一个数组</li><li><strong>可变参数只能作为函数的最后一个参数，所以一个函数最多只能有一个可变参数</strong></li><li>可变参数在编译为字节码后，在方法签名中就是以数组形态出现的。这两个方法的签名是一致的，不能作为方法的重载。如果同时出现，是不能编译通过的。可变参数可以兼容数组，反之则不成立</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> [] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> temp : data) &#123;</span><br><span class="line">            sum += temp ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        System.out.print(ArrayUtil.sum(<span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)) ;</span><br><span class="line">    <span class="comment">//上面如果是这样(new [] int &#123;1,2,3&#125;) ;则会出现报错</span></span><br><span class="line">        <span class="comment">//错误: 需要&lt;标识符&gt; System.out.println(ArrayUtil.sum(new^(此处标出错误)[] int &#123;1,2,3&#125;)) ;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> ... data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> temp : data) &#123;</span><br><span class="line">            sum += temp ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        System.out.printl(ArrayUtil.sum(<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>)) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="java输入方式"><a href="#java输入方式" class="headerlink" title="java输入方式"></a>java输入方式</h2><h3 id="一、从键盘获取不限制长度的数组"><a href="#一、从键盘获取不限制长度的数组" class="headerlink" title="一、从键盘获取不限制长度的数组"></a>一、从键盘获取不限制长度的数组</h3><h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><p><strong>split() 方法根据匹配给定的正则表达式来拆分字符串。</strong></p><p><strong>注意：</strong> <strong>.</strong> 、 **$**、 <strong>|</strong> 和 ***** 等转义字符，必须得加 <code>\\</code>。</p><p><strong>注意：</strong>多个分隔符，可以用 <strong>|</strong> 作为连字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入几个数并用“.”隔开:&quot;</span>);</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//从键盘接收数据</span></span><br><span class="line">        String str = sc.next().toString();<span class="comment">//next()方式接收字符串</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">        String [] arr  = str.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;arr.length;j++) &#123;</span><br><span class="line">          System.out.print(arr[j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、从键盘获取限制长度的数组"><a href="#二、从键盘获取限制长度的数组" class="headerlink" title="二、从键盘获取限制长度的数组"></a>二、从键盘获取限制长度的数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputArrayLimitLength</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入&quot;</span>+n+<span class="string">&quot;个数：&quot;</span>);</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span>[] b=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.length;i++)&#123;</span><br><span class="line">b[i]=sc.nextInt();</span><br><span class="line">System.out.print(<span class="string">&quot; &quot;</span> + b[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="引用传递实际应用"><a href="#引用传递实际应用" class="headerlink" title="引用传递实际应用"></a>引用传递实际应用</h2><h3 id="类关联结构"><a href="#类关联结构" class="headerlink" title="类关联结构"></a>类关联结构</h3><h4 id="代码链"><a href="#代码链" class="headerlink" title="代码链"></a>代码链</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price ;</span><br><span class="line">    <span class="keyword">private</span> Person person ;<span class="comment">//一辆车属于一个人</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String name,<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">        <span class="keyword">this</span>.price = price ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.person ; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;汽车品牌号&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;、汽车价格:&quot;</span> + <span class="keyword">this</span>.price ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age ;</span><br><span class="line">    <span class="keyword">private</span> Car car ;<span class="comment">//一个人有一辆车</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">        <span class="keyword">this</span>.age = age ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCar</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.car = car ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.car ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;、年龄：&quot;</span> + <span class="keyword">this</span>.age ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明对象并且设置彼此的关系</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">&quot;Mr.lin&quot;</span>,<span class="number">29</span>) ;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car(<span class="string">&quot;binli&quot;</span>,<span class="number">10</span>) ;</span><br><span class="line">        person.setCar(car) ;<span class="comment">//一个人有一辆车</span></span><br><span class="line">        car.setPerson(person) ;<span class="comment">//一辆车属于一个人</span></span><br><span class="line">        <span class="comment">//第二部：根据关系获取数据</span></span><br><span class="line">        System.out.println(person.getCar().getInfo()) ;<span class="comment">//代码链</span></span><br><span class="line">        System.out.println(car.getPerson().getInfo()) ;<span class="comment">//代码链</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自身关联"><a href="#自身关联" class="headerlink" title="自身关联"></a>自身关联</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price ;</span><br><span class="line">    <span class="keyword">private</span> Person person ;<span class="comment">//一辆车属于一个人</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String name,<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">        <span class="keyword">this</span>.price = price ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.person ; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;汽车品牌号&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;、汽车价格:&quot;</span> + <span class="keyword">this</span>.price ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age ;</span><br><span class="line">    <span class="keyword">private</span> Car car ;<span class="comment">//一个人有一辆车</span></span><br><span class="line">    <span class="keyword">private</span> Person children [] ;<span class="comment">//一个人有多个孩子</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChildren</span> <span class="params">(Person children[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children = children ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Person [] getChildren() &#123;</span><br><span class="line">        <span class="keyword">return</span> children ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">        <span class="keyword">this</span>.age = age ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCar</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.car = car ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.car ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;、年龄：&quot;</span> + <span class="keyword">this</span>.age ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明对象并且设置彼此的关系</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">&quot;Mr.lin&quot;</span>,<span class="number">29</span>) ;</span><br><span class="line">        Person childA = <span class="keyword">new</span> Person(<span class="string">&quot;AA&quot;</span>,<span class="number">10</span>) ;</span><br><span class="line">        Person childB = <span class="keyword">new</span> Person(<span class="string">&quot;BB&quot;</span>,<span class="number">13</span>) ;</span><br><span class="line">        childA.setCar(<span class="keyword">new</span> Car(<span class="string">&quot;X&quot;</span>,<span class="number">100</span>)) ;</span><br><span class="line">        childB.setCar(<span class="keyword">new</span> Car(<span class="string">&quot;XX&quot;</span>,<span class="number">1000</span>)) ;</span><br><span class="line">        person.setChildren(<span class="keyword">new</span> Person [] &#123;childA,childB&#125;) ;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car(<span class="string">&quot;binli&quot;</span>,<span class="number">10</span>) ;</span><br><span class="line">        person.setCar(car) ;<span class="comment">//一个人有一辆车</span></span><br><span class="line">        car.setPerson(person) ;<span class="comment">//一辆车属于一个人</span></span><br><span class="line">        <span class="comment">//第二部：根据关系获取数据</span></span><br><span class="line">        System.out.println(person.getCar().getInfo()) ;<span class="comment">//代码链</span></span><br><span class="line">        System.out.println(car.getPerson().getInfo()) ;<span class="comment">//代码链</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; person.getChildren().length ; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t|-&quot;</span> + person.getChildren()[i].getInfo()) ;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t|-&quot;</span> + person.getChildren()[i].getCar().getInfo()) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据表与简单Java类映射转换"><a href="#数据表与简单Java类映射转换" class="headerlink" title="数据表与简单Java类映射转换"></a>数据表与简单Java类映射转换</h2><h3 id="映射转换"><a href="#映射转换" class="headerlink" title="映射转换"></a>映射转换</h3><ul><li>数据实体表设计 = 类的定义</li><li>表中的字段 = 类的成员属性</li><li>表的外键关联 = 引用关联</li><li>表的一行记录 = 类的一个实例化对象</li><li>表的多行记录 = 对象数组</li></ul><p>​        对于数据表与简单Java类之间的映射最好的解决步骤：先抛开所有的关联字段不看，写出类的基本组成，而后通过引用配置关联字段的关系</p><h3 id="一对多映射"><a href="#一对多映射" class="headerlink" title="一对多映射"></a>一对多映射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> iid ;</span><br><span class="line">    <span class="keyword">private</span> String title ;</span><br><span class="line">    <span class="keyword">private</span> Subitem subitems [] ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Item</span><span class="params">(<span class="keyword">long</span> iid ,String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title ;</span><br><span class="line">        <span class="keyword">this</span>.iid = iid ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubitems</span><span class="params">(Subitem subitems[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subitems = subitems ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Subitem [] getSubitems() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.subitems ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【分类信息】iid = &quot;</span> + <span class="keyword">this</span>.iid + <span class="string">&quot;title = &quot;</span> + <span class="keyword">this</span>.title ;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subitem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sid ;</span><br><span class="line">    <span class="keyword">private</span> String title ;</span><br><span class="line">    <span class="keyword">private</span> Item item ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Subitem</span><span class="params">(<span class="keyword">long</span> sid,String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid ;</span><br><span class="line">        <span class="keyword">this</span>.title = title ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItem</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.item = item ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">getItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.item ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【自分类信息】sid = &quot;</span> + <span class="keyword">this</span>.sid + <span class="string">&quot;title = &quot;</span> + <span class="keyword">this</span>.title ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一步：根据结构设置对象数据</span></span><br><span class="line">        Item item = <span class="keyword">new</span> Item(<span class="number">1L</span>,<span class="string">&quot;图书&quot;</span>) ;</span><br><span class="line">        Subitem subitems [] = <span class="keyword">new</span> Subitem [] &#123;</span><br><span class="line">            <span class="keyword">new</span> Subitem(<span class="number">10L</span>,<span class="string">&quot;编程图书&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> Subitem(<span class="number">10L</span>,<span class="string">&quot;图形图像类图书&quot;</span>)</span><br><span class="line">        &#125; ;</span><br><span class="line">        item.setSubitems(subitems) ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; subitems.length ; i++) &#123;</span><br><span class="line">            <span class="comment">//第二部：根据要求获取数据</span></span><br><span class="line">            subitems[i].setItem(item) ;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(item.getInfo()) ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; item.getSubitems().length ; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t&quot;</span>+item.getSubitems()[i].getInfo()) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多对多映射"><a href="#多对多映射" class="headerlink" title="多对多映射"></a>多对多映射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String mid ;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> Product products [] ;<span class="comment">//多对多不管中间记录表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(String mid,String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mid = mid ;</span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProducts</span><span class="params">(Product products [])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.products = products ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Product [] getProducts() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.products ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【用户信息】mid = &quot;</span> + <span class="keyword">this</span>.mid + <span class="string">&quot;      name = &quot;</span> + <span class="keyword">this</span>.name ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> pid ;</span><br><span class="line">    <span class="keyword">private</span> String title ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price ;</span><br><span class="line">    <span class="keyword">private</span> Member members [] ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(<span class="keyword">long</span> pid,String title,<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pid = pid ;</span><br><span class="line">        <span class="keyword">this</span>.title = title ;</span><br><span class="line">        <span class="keyword">this</span>.price = price ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMembers</span> <span class="params">(Member members [])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.members = members ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Member [] getMembers () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.members ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【商品信息】pid = &quot;</span> + <span class="keyword">this</span>.pid +<span class="string">&quot;       title = &quot;</span> + <span class="keyword">this</span>.title + <span class="string">&quot;      price = &quot;</span> + <span class="keyword">this</span>.price ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置结构设置对象数据</span></span><br><span class="line">        Member memA = <span class="keyword">new</span> Member(<span class="string">&quot;mldn&quot;</span>,<span class="string">&quot;Davi&quot;</span>) ;</span><br><span class="line">        Member memB = <span class="keyword">new</span> Member(<span class="string">&quot;mlnjava&quot;</span>,<span class="string">&quot;Michael&quot;</span>) ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//注意此处1L、2L、3L</span></span><br><span class="line">        Product proA = <span class="keyword">new</span> Product(<span class="number">1L</span>,<span class="string">&quot;Java开发图书&quot;</span>,<span class="number">79.8</span>) ;<span class="comment">//此处1L表示1是长整型</span></span><br><span class="line">        Product proB = <span class="keyword">new</span> Product(<span class="number">2L</span>,<span class="string">&quot;耳机&quot;</span>,<span class="number">1499</span>) ;<span class="comment">//如果为1f则为float型</span></span><br><span class="line">        Product proC = <span class="keyword">new</span> Product(<span class="number">3L</span>,<span class="string">&quot;小米手机&quot;</span>,<span class="number">1999</span>) ;<span class="comment">//1L就是1</span></span><br><span class="line">        memA.setProducts(<span class="keyword">new</span> Product[] &#123;proA,proB,proC&#125;) ;</span><br><span class="line">        memB.setProducts(<span class="keyword">new</span> Product[] &#123;proA&#125;) ;</span><br><span class="line">        proA.setMembers(<span class="keyword">new</span> Member[] &#123;memA,memB&#125;) ;</span><br><span class="line">        proB.setMembers(<span class="keyword">new</span> Member[] &#123;memA&#125;) ;</span><br><span class="line">        proC.setMembers(<span class="keyword">new</span> Member[] &#123;memA&#125;) ;</span><br><span class="line">        <span class="comment">//第二部：根据要求获取数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------根据用户查看浏览商品信息---------&quot;</span>) ;</span><br><span class="line">        System.out.println(memA.getInfo()) ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; memA.getProducts().length ; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t&quot;</span> + memA.getProducts()[i].getInfo()) ;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------根据商品查看浏览用户信息---------&quot;</span>) ; </span><br><span class="line">        System.out.println(proA.getInfo()) ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; proA.getMembers().length ; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t&quot;</span> + proA.getMembers()[i].getInfo()) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂多对多映射"><a href="#复杂多对多映射" class="headerlink" title="复杂多对多映射"></a>复杂多对多映射</h3><p>根据要求实现如下功能：</p><ul><li>可以根据一个用户找到该用户对应的所有角色，以及每一个角色对应的所有权限信息；</li><li>可以根据一个角色找到该角色下的所有权限，以及拥有此角色的全部用户信息；</li><li>可以根据一个权限找到具备此权限所有用户信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String mid ;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> Role roles [] ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(String mid,String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mid = mid ;</span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(Role roles[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Role [] getRoles() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.roles ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【用户信息】id = &quot;</span> + <span class="keyword">this</span>.mid + <span class="string">&quot;name = &quot;</span> + <span class="keyword">this</span>.name ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> rid ;</span><br><span class="line">    <span class="keyword">private</span> String title ;</span><br><span class="line">    <span class="keyword">private</span> Privilege privileges [] ;</span><br><span class="line">    <span class="keyword">private</span> Member members [] ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Role</span><span class="params">(<span class="keyword">long</span> rid,String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rid = rid ;</span><br><span class="line">        <span class="keyword">this</span>.title = title ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrivileges</span><span class="params">(Privilege privileges[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.privileges = privileges ; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Privilege [] getPrivileges() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.privileges ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMembers</span><span class="params">(Member members[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.members = members ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Member [] getMembers() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.members ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【角色信息】id = &quot;</span> + <span class="keyword">this</span>.rid + <span class="string">&quot;title = &quot;</span> + <span class="keyword">this</span>.title ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Privilege</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> pid ;</span><br><span class="line">    <span class="keyword">private</span> String title ;</span><br><span class="line">    <span class="keyword">private</span> Role role ;</span><br><span class="line">    <span class="keyword">private</span> Member members [] ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Privilege</span><span class="params">(<span class="keyword">long</span> pid,String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pid = pid ;</span><br><span class="line">        <span class="keyword">this</span>.title = title ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRole</span><span class="params">(Role role)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.role = role ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">getRole</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.role ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMembers</span><span class="params">(Member members[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.members = members ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Member [] getMembers() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.members ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【权限信息】id = &quot;</span> + <span class="keyword">this</span>.pid + <span class="string">&quot;title = &quot;</span> + <span class="keyword">this</span>.title ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Member memA = <span class="keyword">new</span> Member(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;Bob&quot;</span>) ;</span><br><span class="line">        Member memB = <span class="keyword">new</span> Member(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;kang&quot;</span>) ;</span><br><span class="line">        Role roleA = <span class="keyword">new</span> Role(<span class="number">1L</span>,<span class="string">&quot;系统配置&quot;</span>) ;</span><br><span class="line">        Role roleB = <span class="keyword">new</span> Role(<span class="number">2L</span>,<span class="string">&quot;备份管理&quot;</span>) ;</span><br><span class="line">        Role roleC = <span class="keyword">new</span> Role(<span class="number">3L</span>,<span class="string">&quot;人事管理&quot;</span>) ;</span><br><span class="line">        Privilege priA = <span class="keyword">new</span> Privilege (<span class="number">1000L</span>,<span class="string">&quot;系统初始化&quot;</span>) ;</span><br><span class="line">        Privilege priB = <span class="keyword">new</span> Privilege (<span class="number">1001L</span>,<span class="string">&quot;系统系统还原&quot;</span>) ;</span><br><span class="line">        Privilege priC = <span class="keyword">new</span> Privilege (<span class="number">1002L</span>,<span class="string">&quot;系统环境修改&quot;</span>) ;  </span><br><span class="line">        Privilege priD = <span class="keyword">new</span> Privilege (<span class="number">2000L</span>,<span class="string">&quot;备份员工数据&quot;</span>) ;</span><br><span class="line">        Privilege priE = <span class="keyword">new</span> Privilege (<span class="number">2001L</span>,<span class="string">&quot;备份部门数据&quot;</span>) ;</span><br><span class="line">        Privilege priF = <span class="keyword">new</span> Privilege (<span class="number">2002L</span>,<span class="string">&quot;备份公文数据&quot;</span>) ;</span><br><span class="line">        Privilege priG = <span class="keyword">new</span> Privilege (<span class="number">3000L</span>,<span class="string">&quot;增加员工&quot;</span>) ;</span><br><span class="line">Privilege priH = <span class="keyword">new</span> Privilege (<span class="number">3001L</span>,<span class="string">&quot;编辑员工&quot;</span>) ;</span><br><span class="line">        Privilege priI = <span class="keyword">new</span> Privilege (<span class="number">3002L</span>,<span class="string">&quot;浏览员工&quot;</span>) ;</span><br><span class="line">Privilege priJ = <span class="keyword">new</span> Privilege (<span class="number">3003L</span>,<span class="string">&quot;员工离职&quot;</span>) ;</span><br><span class="line">        roleA.setMembers(<span class="keyword">new</span> Member[] &#123;memA,memB&#125;) ;</span><br><span class="line">        roleB.setMembers(<span class="keyword">new</span> Member[] &#123;memA,memB&#125;) ;</span><br><span class="line">        roleC.setMembers(<span class="keyword">new</span> Member[] &#123;memB&#125;) ;</span><br><span class="line">        <span class="comment">//增加角色与权限对应关系</span></span><br><span class="line">roleA.setPrivileges(<span class="keyword">new</span> Privilege[] &#123;priA,priB,priC&#125;) ;</span><br><span class="line">        roleB.setPrivileges(<span class="keyword">new</span> Privilege[] &#123;priD,priE,priF&#125;) ;</span><br><span class="line">        roleC.setPrivileges(<span class="keyword">new</span> Privilege[] &#123;priG,priH,priI,priJ&#125;) ;</span><br><span class="line">        <span class="comment">//增加权限与角色对应</span></span><br><span class="line">        priA.setRole(roleA) ;</span><br><span class="line">        priB.setRole(roleA) ;</span><br><span class="line">        priC.setRole(roleA) ;</span><br><span class="line">        priD.setRole(roleB) ;</span><br><span class="line">        priF.setRole(roleB) ;</span><br><span class="line">        priG.setRole(roleB) ;</span><br><span class="line">        priH.setRole(roleC) ;</span><br><span class="line">        priI.setRole(roleC) ;</span><br><span class="line">        priJ.setRole(roleC) ;</span><br><span class="line">        <span class="comment">//增加用户与角色对应</span></span><br><span class="line">        memA.setRoles(<span class="keyword">new</span> Role[] &#123;roleA,roleB&#125;) ;</span><br><span class="line">        memB.setRoles(<span class="keyword">new</span> Role[] &#123;roleA,roleB,roleC&#125;) ;</span><br><span class="line">        roleA.setMembers(<span class="keyword">new</span> Member[] &#123;memA,memB&#125;) ;</span><br><span class="line">        roleB.setMembers(<span class="keyword">new</span> Member[] &#123;memA,memB&#125;) ;</span><br><span class="line">        roleC.setMembers(<span class="keyword">new</span> Member[] &#123;memB&#125;) ;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------通过用户查找信息----------&quot;</span>) ;</span><br><span class="line">        System.out.println(memB.getInfo()) ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; memB.getRoles().length ; x++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t&quot;</span> + memB.getRoles()[x].getInfo()) ;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span> ; y &lt; memB.getRoles()[x].getPrivileges().length ; y++)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;\t\t&quot;</span> + memB.getRoles()[x].getPrivileges()[y].getInfo()) ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------通过角色查找信息----------&quot;</span>) ;</span><br><span class="line">        System.out.println(roleB.getInfo()) ;</span><br><span class="line">        System.out.println(<span class="string">&quot;\t 浏览此角色下的所有权限信息:&quot;</span>) ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; roleB.getPrivileges().length ; x++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t&quot;</span> + roleB.getPrivileges()[x].getInfo()) ;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\t 浏览此角色下的所有用户信息:&quot;</span>) ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; roleB.getMembers().length ; x++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t &quot;</span>+ roleB.getMembers()[x].getInfo()) ;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------通过权限查找信息----------&quot;</span>) ;</span><br><span class="line">        System.out.println(priA.getInfo()) ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span> ;x &lt; priA.getRole().getMembers().length ; x++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t&quot;</span> + priA.getRole().getMembers()[x].getInfo()) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String类特点分析"><a href="#String类特点分析" class="headerlink" title="String类特点分析"></a>String类特点分析</h2><h3 id="String类简介"><a href="#String类简介" class="headerlink" title="String类简介"></a>String类简介</h3><p>字符串严格意义上说不能算是基本数据类型，也就是说没有任何一门语言会提供有字符串这种数据类型，而Java里面为了方便开发者进行项目的编写，利用JVM的支持制造了一种可以简单使用的String类。</p><p><strong>String本身包装的是一个数组，并且其有两种对象的实例化形式</strong></p><ul><li>直接赋值</li><li>构造方法实例化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;BearKouber.github.io&quot;</span> ;<span class="comment">//直接赋值</span></span><br><span class="line">        System.out.println(str1) ;</span><br><span class="line">        String str2 = <span class="keyword">new</span> String (<span class="string">&quot;BearKouber.github.io&quot;</span>) ;<span class="comment">//构造方法实例化</span></span><br><span class="line">System.out.println(str2) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>JDK1.8之前String保存的是字符数组</th><th>JDK1.9以后String保存的是字节数组</th></tr></thead><tbody><tr><td>private final char value[];</td><td>private final byte[] value</td></tr></tbody></table><p>所谓的字符串就是对数组的一种特殊包装应用；</p><p><em>注意：因为包装的是数组，所以字符串里面的内容是肯定无法改变的</em></p><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><p>String可以像基本数据类型一样进行判断(==)，但是判断结果不准确</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String strA = <span class="string">&quot;kouber&quot;</span> ;</span><br><span class="line">        String strB = <span class="keyword">new</span> String (<span class="string">&quot;kouber&quot;</span>) ;</span><br><span class="line">        System.out.println(strA == strB) ;<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要获得准确判断结果可以使用String类中提供的一个比较方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(String str)</span></span>;<span class="comment">//有变形</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String strA = <span class="string">&quot;kouber&quot;</span> ;</span><br><span class="line">        String strB = <span class="keyword">new</span> String (<span class="string">&quot;kouber&quot;</span>) ;</span><br><span class="line">        System.out.println(strA.equals(strB)) ;<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>比较String与equals()的区别</strong> </p><ul><li><code>==</code>比较的是数值比较，如果用于对象比较上比较的是两个内存的地址数值，而new是会分配新的地址空间，因此使用”==”就会出现错误判断结果；</li><li><code>equals()</code> 是类所提供的一个比较方法，可以直接进行字符串内容的判断</li></ul><h3 id="字符串常量是String类的匿名对象"><a href="#字符串常量是String类的匿名对象" class="headerlink" title="字符串常量是String类的匿名对象"></a>字符串常量是String类的匿名对象</h3><p>程序之中不会提供有字符串这样的基本数据类型，提供的只是String类，所以任何使用<code>&quot;</code>定义的字符串常量实际上描述的都是一个String类的匿名对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;kouber&quot;</span> ;</span><br><span class="line">        System.out.println(<span class="string">&quot;kouber&quot;</span>.equals(str)) ;<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所谓的String类对象的直接赋值直接描述的是，将一个匿名对象设置一个具体的引用名字。</p><p>观察匿名对象的存在：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;kouber&quot;</span> ;</span><br><span class="line">        System.out.println(<span class="string">&quot;kouber&quot;</span>.equals(str)) ; <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出<code>kouber</code>竟可以使用<code>equals()</code>方法实现对象相等的判断，所以可以得出结论：程序中的确没有字符串常量，有的只是String类的匿名对象。(什么？我看不懂啊歪！！！)</p><p><strong>关于对象相等判断的小技巧:</strong></p><p><strong>将字符串常量写在前面</strong></p><ul><li><p>接收用户输入数据的字符串调用方法</p><ul><li>当输入不为空时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;kouber&quot;</span> ; <span class="comment">//str为用户输入的内容</span></span><br><span class="line">        System.out.println(str.equals(<span class="string">&quot;kouber&quot;</span>)) ; <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当输入为空时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="keyword">null</span> ; <span class="comment">//str为用户输入的内容</span></span><br><span class="line">        System.out.println(str.equals(<span class="string">&quot;null&quot;</span>)) ; <span class="comment">//报错：Exception in thread &quot;main&quot; java.lang.NullPointerException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将字符串对象写在前面</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="keyword">null</span> ; <span class="comment">//str为用户输入的内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;kouber&quot;</span>.equals(str)) ; <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>equals()</code>方法里面提供有一个可以回避null的判断，如果将字符串常量写在前面，那么调用<code>equals()</code>方法的时候永远都不可能出现<code>NullPointerException</code>,字符串是一个匿名对象，匿名对象一定是开辟好堆内存空间的对象。</p><h3 id="String类对象两种实例化方式比较"><a href="#String类对象两种实例化方式比较" class="headerlink" title="String类对象两种实例化方式比较"></a>String类对象两种实例化方式比较</h3><h4 id="直接赋值实例化"><a href="#直接赋值实例化" class="headerlink" title="直接赋值实例化"></a>直接赋值实例化</h4><p>在程序之中只需要把字符串赋值给String对象就可以实现对象的实例化处理</p><p>这种情况下肯定只会开辟出一块堆内存空间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;kouber&quot;</span> ; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了这种内存模式之外，利用直接赋值实例化String的形式还可以实现同一个字符串对象数据的共享操作。</p><p>观察String直接赋值时的数据共享</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String strA = <span class="string">&quot;kouber&quot;</span> ;</span><br><span class="line">        String strB = <span class="string">&quot;kouber&quot;</span> ;</span><br><span class="line">        System.out.println(strA == strB) ;<span class="comment">//“==”为地址判断</span></span><br><span class="line">    &#125;<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：这两个对象所指的堆内存空间是同一个</p><p>即在两个String变量的值相等时</p><p>占两个堆内存空间，一个栈内存空间，<code>strA</code>和<code>strB</code>所指向的地址相同</p><table><thead><tr><th>堆内存</th><th>栈内存</th></tr></thead><tbody><tr><td><code>strA</code></td><td><code>kouber</code></td></tr><tr><td><code>strB</code></td><td></td></tr></tbody></table><p>为什么不是在堆空间中开辟两个”<code>kouber</code>“对象而是让<code>strA</code>和<code>strB</code>指向同一个对象呢？</p><p>因为在JVM的<em>共享设计模式</em> 中</p><p>JVM的底层实现实际上在堆中存在一个对象池（常量池，不一定只保存String对象,池就是一个在堆内存中的数组，），当使用直接赋值方式定义String类对象，那么JVM会将此字符串对象使用的匿名对象就是如”<code>kouber</code>“字符串入池保存。如果后面还有其他String对象采用同样方式且设置同样内容时，将不会开辟新的堆空间，而是继续使用相同的空间</p><h4 id="构造方法实例化"><a href="#构造方法实例化" class="headerlink" title="构造方法实例化"></a>构造方法实例化</h4><p>会开辟两块堆空间，一块在常量池中存储”<code>kouber</code>“字符串常量另一块在堆中存储这个对象。</p><p>而str指向的是对象的地址而不是常量池中”<code>kouber</code>“的地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="keyword">new</span> String(<span class="string">&quot;kouber&quot;</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就会造成一块堆内存空间的浪费(常量池中)</p><p><strong>如果常量池中已存在要使用构造方法定义的字符串，那么只会开辟一个堆内存空间来储存对象</strong></p><p>即下面一共开辟了两个堆内存空间</p><p>一个常量池中的空间储存”<code>kouber</code>“字符串，和另一个堆内存空间储存这个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String strA = <span class="string">&quot;kouber&quot;</span> ;</span><br><span class="line">        String strB = <span class="keyword">new</span> String(<span class="string">&quot;kouber&quot;</span>) ;</span><br><span class="line">        System.out.println(strA == strB) ;<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>让该对象入池的方法(<em>String类的intern方法</em>)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String strA = <span class="string">&quot;kouber&quot;</span> ;</span><br><span class="line">        String strB = <span class="keyword">new</span> String(<span class="string">&quot;kouber&quot;</span>).intern() ;</span><br><span class="line">        System.out.println(strA == strB) ;<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结一下两种实例化方法的区别："><a href="#总结一下两种实例化方法的区别：" class="headerlink" title="总结一下两种实例化方法的区别："></a>总结一下两种实例化方法的区别：</h4><ul><li>直接赋值方式：只会开辟一块堆内存空间，并且自动保存在常量池中，以供我们下次重复使用。(此处重复使用我感觉就是类似C语言里面的数组的压缩储存)</li><li>构造方法：会开辟两块堆内存空间，其中在常量池的会成为垃圾空间，不会自动入池，不会实现对象重用，可以使用<code>intern()</code>方法手工入池。</li><li><a class="link"   href="https://blog.csdn.net/Cricket_7/article/details/92565405" >看不懂就点我<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://blog.csdn.net/lu202032/article/details/117047712" >点我更详细<i class="fas fa-external-link-alt"></i></a></li></ul><h3 id="String对象常量池"><a href="#String对象常量池" class="headerlink" title="String对象常量池"></a>String对象常量池</h3><p>实现数据的共享处理。</p><p>以String对象池为例，里面的内容主要就是为了重用，而重用就是共享设计。</p><p>在Java之中的对象(常量)池可以分为两种</p><ul><li>静态常量池：指的是<code>程序(*.class)</code>在加载时候会自动将此程序之中保存<code>全部信息(字符串、普通常量、类、方法)</code>全部进行分配提供的池子。</li><li>运行时常量池：指的是当一个<code>程序(*.class)</code>加载只后，里面可能有一些变量需要用户输入后接收，这个时候提供给可变变量和其他可变数据的的池子。</li></ul><p><code>strB</code><strong>储存在静态常量池中</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String strA = <span class="string">&quot;kouber&quot;</span> ;</span><br><span class="line">        String strB = <span class="string">&quot;kou&quot;</span> + <span class="string">&quot;ber&quot;</span> ;</span><br><span class="line">        <span class="comment">//String strB = &quot;kouber&quot; ; 上面代码跟这行效果一样</span></span><br><span class="line">        System.out.println(strA == strB) ;<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>显然strA和StrB指向的是同一地址，即静态常量池中的“kouber”的地址</strong></p></blockquote><p>上述代码中所给出的内容全部都是静态常量数据(字符串的常量都是匿名对象)，所以程序开发中会帮设计者处理好相应的连接</p><p><code>strB</code><strong>储存在运行时常量池中</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String strK = <span class="string">&quot;kou&quot;</span> ;</span><br><span class="line">        String strA = <span class="string">&quot;kouber&quot;</span> ;</span><br><span class="line">        String strB = strK + <span class="string">&quot;ber&quot;</span> ;</span><br><span class="line">        String strC = <span class="string">&quot;kou&quot;</span>+<span class="string">&quot;ber&quot;</span> ;</span><br><span class="line">        System.out.println(<span class="string">&quot;AB  &quot;</span>+ (strA == strB)) ;<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;AC  &quot;</span>+ (strA == strC)) ;<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;BC  &quot;</span>+ (strB == strC)) ;<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序加载时候不确定<code>strK</code>是什么内容。在字符串进行连接的时候，<code>strK</code>是一个变量，变量的内容是可以修改的，所以程序不认为<code>strB</code>的结果就是最终的结果</p><blockquote><p><strong>上述表达过于晦涩难懂，简单来说就是strB在动态常量池中，strA和strC在静态在常量池中</strong></p></blockquote><p>结论：遇见变量数据时，最终比较变量时需要使用<code>equals()</code></p><h3 id="字符串修改分析"><a href="#字符串修改分析" class="headerlink" title="字符串修改分析"></a>字符串修改分析</h3><p><strong>String定义之后无法修改</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;bear&quot;</span> ;</span><br><span class="line">        str += <span class="string">&quot;kou&quot;</span> ;</span><br><span class="line">        str += <span class="string">&quot;ber&quot;</span> ;</span><br><span class="line">        System.out.println(str) ;<span class="comment">//bearkouber</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么上面代码看似是修改了String变量</p><table><thead><tr><th>栈内存</th><th>堆内存</th></tr></thead><tbody><tr><td><code>str</code></td><td><code>bear</code></td></tr><tr><td></td><td><code>kou</code></td></tr><tr><td></td><td><code>bearkou</code></td></tr><tr><td></td><td><code>ber</code></td></tr><tr><td></td><td><code>bearkouber</code></td></tr></tbody></table><p>对<code>str</code>内容的修实际上是<code>str</code>指针指向的变化：</p><ol><li>指向<code>bear</code></li><li>指向<code>bearkou</code></li><li>指向<code>bearkouber</code></li></ol><p><strong>这样做造成的结果为：</strong></p><p>堆内存<code>bear</code>、<code>kou</code>、<code>bearkou</code>、<code>ber</code>将成为垃圾内存空间，string对象的指向修改了2次。</p><p><strong>在开发中频繁对String类内容进行修改会使程序的性能变得很差</strong></p><h3 id="主方法组成分析"><a href="#主方法组成分析" class="headerlink" title="主方法组成分析"></a>主方法组成分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br></pre></td></tr></table></figure><ul><li><code>public</code>:描述 的是一种访问权限，主方法是一切的开始点，开始点一定是公共的；</li><li><code>static</code>:程序的执行是通过类名称完成的，所以此方法是由类直接调用;</li><li><code>void</code>:主方法是一切的起点，起点一旦开始就没有返回的可能；</li><li><code>main</code>:是一个系统定义好的方法名称；</li><li><code>String[] args</code>:字符串的数组，可以实现程序启动参数的接收</li></ul><p><strong>在程序执行时候可以设置参数，每一个参数之间使用空格分割</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String arg:args)&#123;</span><br><span class="line">            System.out.println(arg) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;javac Demo.java</span><br><span class="line">&gt;java Demo first second</span><br><span class="line">first</span><br><span class="line">second</span><br></pre></td></tr></table></figure><p><strong>注意：如果参数含空格，则必须使用“””包装</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String arg:args)&#123;</span><br><span class="line">            System.out.println(arg) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;javac Demo.java</span><br><span class="line">&gt;java Demo<span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h2 id="Sting类常用方法"><a href="#Sting类常用方法" class="headerlink" title="Sting类常用方法"></a>Sting类常用方法</h2><h3 id="JavaDoc文档"><a href="#JavaDoc文档" class="headerlink" title="JavaDoc文档"></a>JavaDoc文档</h3><p><a class="link"   href="https://docs.oracle.com/javase/8/docs/api/" >就是这个<i class="fas fa-external-link-alt"></i></a></p><h3 id="字符串与字符"><a href="#字符串与字符" class="headerlink" title="字符串与字符"></a>字符串与字符</h3><h4 id="获取字符串其中一个字符-charAt"><a href="#获取字符串其中一个字符-charAt" class="headerlink" title="获取字符串其中一个字符(charAt)"></a>获取字符串其中一个字符(charAt)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;kouber&quot;</span> ;</span><br><span class="line">        <span class="keyword">char</span> c = str.charAt(<span class="number">1</span>) ;</span><br><span class="line">        System.out.println(c) ;<span class="comment">//o        </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串与字符数组的相互转换"><a href="#字符串与字符数组的相互转换" class="headerlink" title="字符串与字符数组的相互转换"></a>字符串与字符数组的相互转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;kouber&quot;</span> ;</span><br><span class="line">        <span class="keyword">char</span> [] name = str.toCharArray() ;<span class="comment">//将字符串转换为字符数组</span></span><br><span class="line">        String newStr = <span class="keyword">new</span> String(str) ;<span class="comment">//将字符数组转换为字符串</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; name.length ; i++) &#123;</span><br><span class="line">            System.out.print(name[i]) ;<span class="comment">//kouber</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串与字节"><a href="#字符串与字节" class="headerlink" title="字符串与字节"></a>字符串与字节</h3><p><strong>字节长度：-128~127</strong></p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>public String (byte [] bytes)</code></td><td>将全部字符数组变为字符串</td></tr><tr><td><code>public String(byte [] bytes,int offset,int length)</code></td><td>将部分字符数组变为字符串</td></tr><tr><td><code>public byte [] getBytes()</code></td><td>将字符串转为字节数组</td></tr><tr><td><code>public byte [] getBytes(StringcharsetName) throwsUnsupportedEncodingException</code></td><td><strong>编码转换</strong></td></tr></tbody></table><h4 id="分别用char和byte将String类型的kouber全部变为大写并输出"><a href="#分别用char和byte将String类型的kouber全部变为大写并输出" class="headerlink" title="分别用char和byte将String类型的kouber全部变为大写并输出"></a>分别用<code>char</code>和<code>byte</code>将String类型的<code>kouber</code>全部变为大写并输出</h4><h4 id="char"><a href="#char" class="headerlink" title="char"></a>char</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">&quot;kouber&quot;</span> ;</span><br><span class="line"><span class="keyword">char</span> [] name = str.toCharArray() ;<span class="comment">//字符串转字符数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; name.length ; i++) &#123;</span><br><span class="line">            name[i] -= <span class="number">32</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(name)) ;<span class="comment">//KOUBER</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(name,<span class="number">0</span>,<span class="number">3</span>)) ;<span class="comment">//KOU</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="byte"><a href="#byte" class="headerlink" title="byte"></a>byte</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;kouber&quot;</span> ;</span><br><span class="line">        <span class="keyword">byte</span> [] name = str.getBytes() ;<span class="comment">//将字符串转字节数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; name.length ; i++) &#123;</span><br><span class="line">            name[i] -= <span class="number">32</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(name)) ;<span class="comment">//KOUBER</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(name,<span class="number">0</span>,<span class="number">3</span>)) ;<span class="comment">//KOU</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串比较-1"><a href="#字符串比较-1" class="headerlink" title="字符串比较"></a>字符串比较</h3><h4 id="忽略字母大小写进行比较是否相等-equalsIgnoreCase"><a href="#忽略字母大小写进行比较是否相等-equalsIgnoreCase" class="headerlink" title="忽略字母大小写进行比较是否相等(equalsIgnoreCase())"></a>忽略字母大小写进行比较是否相等(<code>equalsIgnoreCase()</code>)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String strA = <span class="string">&quot;kou&quot;</span> ;</span><br><span class="line">String strB = <span class="string">&quot;KOU&quot;</span> ;</span><br><span class="line">System.out.println(strA.equals(strB)) ;<span class="comment">//false</span></span><br><span class="line">System.out.println(strB.equalsIgnoreCase(strB)) ;<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回两个字符串的差值-strA-strB"><a href="#返回两个字符串的差值-strA-strB" class="headerlink" title="返回两个字符串的差值(strA-strB)"></a>返回两个字符串的差值(strA-strB)</h4><h5 id="区分大小写"><a href="#区分大小写" class="headerlink" title="区分大小写"></a>区分大小写</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String strA = <span class="string">&quot;AB&quot;</span> ;</span><br><span class="line">String strB = <span class="string">&quot;AA&quot;</span> ;</span><br><span class="line">System.out.println(strA.compareTo(strB)) ;<span class="comment">//1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="不区分大小写"><a href="#不区分大小写" class="headerlink" title="不区分大小写"></a>不区分大小写</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String strA = <span class="string">&quot;AB&quot;</span> ;</span><br><span class="line">String strB = <span class="string">&quot;Ab&quot;</span> ;</span><br><span class="line">System.out.println(strA.compareTo(strB)) ;<span class="comment">//32</span></span><br><span class="line">        System.out.println(strA.compareToIgnoreCase(strB)) ;<span class="comment">//0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h3><h4 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">&quot;BearKouber&quot;</span> ;</span><br><span class="line">System.out.println(str.contains(<span class="string">&quot;Kou&quot;</span>)) ;<span class="comment">//true</span></span><br><span class="line">System.out.println(str.contains(<span class="string">&quot;kou&quot;</span>)) ;<span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h4><p>查找方式：前→后</p><p>返回指定字符在字符串中第一次出现处的索引，如果此字符串中没有这样的字符，则返回 -1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">&quot;BearKouber&quot;</span> ;</span><br><span class="line">System.out.println(str.indexOf(<span class="string">&quot;Kou&quot;</span>)) ;<span class="comment">//4</span></span><br><span class="line">System.out.println(str.indexOf(<span class="string">&quot;kou&quot;</span>)) ;<span class="comment">//-1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h4><p>查找方式：后→前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">&quot;BearKouber&quot;</span> ;</span><br><span class="line">System.out.println(str.lastIndexOf(<span class="string">&quot;r&quot;</span>)) ;<span class="comment">//9 有两个r但是输出的是后面的r的位置</span></span><br><span class="line">        System.out.println(str.lastIndexOf(<span class="string">&quot;r&quot;</span>,<span class="number">8</span>)) ;<span class="comment">//3 此处8是指从第八个位置开始查找</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="startsWith和endsWith"><a href="#startsWith和endsWith" class="headerlink" title="startsWith和endsWith"></a><code>startsWith</code>和<code>endsWith</code></h4><p>用于检测字符串是否以指定的前缀开始。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">&quot;@@BearKouber##&quot;</span> ;</span><br><span class="line">System.out.println(str.startsWith(<span class="string">&quot;@@&quot;</span>)) ;<span class="comment">//true</span></span><br><span class="line">        System.out.println(str.startsWith(<span class="string">&quot;Bear&quot;</span>,<span class="number">2</span>)) ;<span class="comment">//true</span></span><br><span class="line">        System.out.println(str.endsWith(<span class="string">&quot;##&quot;</span>)) ;<span class="comment">//true</span></span><br><span class="line">        System.out.println(str.endsWith(<span class="string">&quot;ber&quot;</span>,<span class="number">2</span>)) ;<span class="comment">//只有startsWith有从第几个位置开始查找而endsWith没有这个方法，因此此行会报错</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><h4 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;helloworld &quot;</span> ;</span><br><span class="line">        System.out.println(str.replaceAll(<span class="string">&quot;l&quot;</span>,<span class="string">&quot;X&quot;</span>)) ;<span class="comment">//全部替换</span></span><br><span class="line">        System.out.println(str.replaceFirst(<span class="string">&quot;l&quot;</span>,<span class="string">&quot;X&quot;</span>)) ;<span class="comment">//第一位替换</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//heXXoworXd </span></span><br><span class="line"><span class="comment">//heXloworld</span></span><br></pre></td></tr></table></figure><h3 id="字符串拆分"><a href="#字符串拆分" class="headerlink" title="字符串拆分"></a>字符串拆分</h3><h4 id="split-1"><a href="#split-1" class="headerlink" title="split()"></a>split()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;hello world hello world&quot;</span> ;</span><br><span class="line">        String [] result = str.split(<span class="string">&quot; &quot;</span>) ;<span class="comment">//按空格拆分</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; result.length ; i++) &#123;</span><br><span class="line">            System.out.println(result[i]) ;</span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// hello</span></span><br><span class="line"><span class="comment">// world</span></span><br><span class="line"><span class="comment">// hello</span></span><br><span class="line"><span class="comment">// world</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;hello world hello world&quot;</span> ;</span><br><span class="line">        String [] result = str.split(<span class="string">&quot; &quot;</span>,<span class="number">2</span>) ;<span class="comment">//按空格分两部分拆分</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; result.length ; i++) &#123;</span><br><span class="line">            System.out.println(result[i]) ;</span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hello</span></span><br><span class="line"><span class="comment">//world hello world</span></span><br></pre></td></tr></table></figure><h4 id="拆不开的情况"><a href="#拆不开的情况" class="headerlink" title="拆不开的情况"></a>拆不开的情况</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;127.0.0.1&quot;</span> ;</span><br><span class="line">        String [] result = str.split(<span class="string">&quot;.&quot;</span>) ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; result.length ; i++) &#123;</span><br><span class="line">            System.out.println(result[i]) ;</span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果为空</span></span><br></pre></td></tr></table></figure><h4 id="解决方法：加双斜线"><a href="#解决方法：加双斜线" class="headerlink" title="解决方法：加双斜线\\"></a>解决方法：加双斜线<code>\\</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;127.0.0.1&quot;</span> ;</span><br><span class="line">        String [] result = str.split(<span class="string">&quot;\\.&quot;</span>) ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; result.length ; i++) &#123;</span><br><span class="line">            System.out.println(result[i]) ;</span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 127</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="字符串的截取"><a href="#字符串的截取" class="headerlink" title="字符串的截取"></a>字符串的截取</h3><h4 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;BearKouber&quot;</span> ;</span><br><span class="line">        System.out.println(str.substring(<span class="number">4</span>)) ;<span class="comment">//Kouber</span></span><br><span class="line">        System.out.println(str.substring(<span class="number">4</span>,<span class="number">7</span>)) ;<span class="comment">//Kou</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;K30-photo-Kouber.jpg&quot;</span> ;</span><br><span class="line">        <span class="keyword">int</span> beginIndex = str.indexOf(<span class="string">&quot;-&quot;</span>,str.indexOf(<span class="string">&quot;photo&quot;</span>))+<span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">int</span> endIndex = str.lastIndexOf(<span class="string">&quot;.&quot;</span>) ;</span><br><span class="line">        System.out.println(str.substring(beginIndex,endIndex)) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Kouber</span></span><br></pre></td></tr></table></figure><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><h4 id="format"><a href="#format" class="headerlink" title="format()"></a>format()</h4><p>可以通过占位符对数据进行输出</p><p>常用占位符：字符串(%s),字符(%c),整数(%d),小数(%f) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">&quot;Kouber&quot;</span> ;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">19</span> ;</span><br><span class="line">        <span class="keyword">double</span> score = <span class="number">60.654321</span> ;</span><br><span class="line">        String str = String.format(<span class="string">&quot;name:%s,age:%d,score:%5.1f&quot;</span>,name,age,score) ;</span><br><span class="line">        System.out.println(str) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//name:Kouber,age:19,score: 60.7</span></span><br></pre></td></tr></table></figure><h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><blockquote><p>此处可以看出动态常量池不是共享设计结构，每个字符串单独存储</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String strA = <span class="string">&quot;BearKouber&quot;</span> ;</span><br><span class="line">        String strB = <span class="string">&quot;Bear&quot;</span>.concat(<span class="string">&quot;Kou&quot;</span>).concat(<span class="string">&quot;ber&quot;</span>) ;</span><br><span class="line">        String strC = <span class="string">&quot;Bear&quot;</span> ;</span><br><span class="line">        String strD = <span class="string">&quot;Kouber&quot;</span> ;</span><br><span class="line">        String strE = strC + <span class="string">&quot;Kouber&quot;</span> ;</span><br><span class="line">        String strF = strC + strB ;</span><br><span class="line">        System.out.println(<span class="string">&quot;B &quot;</span> +strB) ;<span class="comment">//BearKouber</span></span><br><span class="line">        System.out.println(<span class="string">&quot;E &quot;</span> +strD) ;<span class="comment">//BearKouber</span></span><br><span class="line">        System.out.println(<span class="string">&quot;F &quot;</span> +strF) ;<span class="comment">//BearKouber</span></span><br><span class="line">        System.out.println(<span class="string">&quot;AB &quot;</span> +(strA == strB)) ;<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;BE &quot;</span> +(strB == strD)) ;<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;BF &quot;</span> +(strB == strF)) ;<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;EF &quot;</span> +(strE == strF)) ;<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断字符串是否为空"><a href="#判断字符串是否为空" class="headerlink" title="判断字符串是否为空"></a>判断字符串是否为空</h3><p><strong>此空非彼空</strong></p><p>在字符串定义时候的<code>&quot;&quot;</code>和<code>null</code>不是一个概念，前者有实例化对象，后者没有实例化对象。</p><p><code>isImpty</code>是在有实例化对象时候才能进行调用的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;&quot;</span> ;</span><br><span class="line">        System.out.println(str.isEmpty()) ;<span class="comment">//true</span></span><br><span class="line">       System.out.println(<span class="string">&quot;kou&quot;</span>.isEmpty()) ;<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回字符串长度length-消除字符串两侧空格trim"><a href="#返回字符串长度length-消除字符串两侧空格trim" class="headerlink" title="返回字符串长度length(),消除字符串两侧空格trim()"></a>返回字符串长度<code>length()</code>,消除字符串两侧空格trim()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;   Hello World   &quot;</span> ;</span><br><span class="line">        System.out.print(str) ;</span><br><span class="line">        System.out.println(str.length()) ;<span class="comment">//17</span></span><br><span class="line">        String trimStr = str.trim() ;</span><br><span class="line">        System.out.print(trimStr) ;</span><br><span class="line">        System.out.println(trimStr.length()) ;<span class="comment">//11</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//    Hello World   17</span></span><br><span class="line"><span class="comment">// Hello World11</span></span><br></pre></td></tr></table></figure><p><strong>数组<code>length</code>是一个属性是没有括号的，字符串里的<code>length</code>是有括号的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] a = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125; ;</span><br><span class="line">        System.out.println(a.length) ;<span class="comment">//7</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><h4 id="toUpperCase-amp-toLowerCase"><a href="#toUpperCase-amp-toLowerCase" class="headerlink" title="toUpperCase()&amp;toLowerCase()"></a>toUpperCase()&amp;toLowerCase()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;Hello World !!!&quot;</span> ;</span><br><span class="line">        System.out.println(str.toUpperCase()) ;</span><br><span class="line">        System.out.println(str.toLowerCase()) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// HELLO WORLD !!!</span></span><br><span class="line"><span class="comment">// hello world !!!</span></span><br></pre></td></tr></table></figure><h4 id="自定义一个实现首字母大写的方法"><a href="#自定义一个实现首字母大写的方法" class="headerlink" title="自定义一个实现首字母大写的方法"></a>自定义一个实现首字母大写的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">initcap</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(str)) &#123;</span><br><span class="line">            <span class="keyword">return</span> str ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(str.length() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> str.toUpperCase() ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase() + str.substring(<span class="number">1</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(StringUtil.initcap(<span class="string">&quot;hello&quot;</span>)) ;</span><br><span class="line">        System.out.println(StringUtil.initcap(<span class="string">&quot;m&quot;</span>)) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Hello</span></span><br><span class="line"><span class="comment">// M</span></span><br></pre></td></tr></table></figure><h2 id="继承的定义与使用"><a href="#继承的定义与使用" class="headerlink" title="继承的定义与使用"></a>继承的定义与使用</h2><p><strong>继承的主要特点：可以扩充已有类的功能。</strong></p><p>好的代码：结构性合理、适合于维护，可用性很高。</p><p><strong>为什么会出现继承？</strong></p><p>当我们开发时候用之前学到的内容进行开发会不可避免的出现一些重复代码，就比如说建立一个人的类和一个学生的类，学生的类中是包含了人的类的所有属性，此时会有重复代码出现，于是可以把人的类当做学生的类的一部分则会省去重复的这段代码。</p><h2 id="继承的实现"><a href="#继承的实现" class="headerlink" title="继承的实现"></a>继承的实现</h2><p><strong>需依靠<code>extends</code>关键字来完成</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>子类——派生类，父类——超类(SuperClass)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age ;</span><br><span class="line">    <span class="comment">//注意此处没有构造方法，默认为无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name:&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;,age:&quot;</span> + <span class="keyword">this</span>.age ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//此处子类初始化，调用了无参构造</span></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student() ;</span><br><span class="line">        stu.setName(<span class="string">&quot;kouber&quot;</span>) ;</span><br><span class="line">        stu.setAge(<span class="number">18</span>) ;</span><br><span class="line">        System.out.println(stu.getInfo()) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="extends报错"><a href="#extends报错" class="headerlink" title="extends报错"></a>extends报错</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age ;</span><br><span class="line">    <span class="comment">//注意此处是有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">        <span class="keyword">this</span>.age = age ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name:&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;,age:&quot;</span> + <span class="keyword">this</span>.age ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="comment">//此处为空的话是默认调用父类无参构造，但是父类的有参构造覆盖了无参构造,此处因父类没有无参构造而报错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student() ;</span><br><span class="line">        stu.setName(<span class="string">&quot;kouber&quot;</span>) ;<span class="comment">//父类定义</span></span><br><span class="line">        stu.setAge(<span class="number">18</span>) ;<span class="comment">//父类定义</span></span><br><span class="line">        System.out.println(stu.getInfo()) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Demo.java:24: 错误: 无法将类 Person中的构造器 Person应用到给定类型;</span></span><br><span class="line"><span class="comment">// class Student extends Person &#123;&#125;</span></span><br><span class="line"><span class="comment">// ^</span></span><br><span class="line"><span class="comment">//   需要: String,int</span></span><br><span class="line"><span class="comment">//   找到: 没有参数</span></span><br><span class="line"><span class="comment">//   原因: 实际参数列表和形式参数列表长度不同</span></span><br></pre></td></tr></table></figure><h4 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h4><p><strong>子类初始化的时候，如果不指定调用父类的某个构造，则需要调用父类的无参构造。你父类的构造是有参构造。会把默认的无参构造覆盖掉。所以编译会报错。</strong></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><h5 id="1-在父类中加一个无参构造"><a href="#1-在父类中加一个无参构造" class="headerlink" title="1.在父类中加一个无参构造"></a>1.在父类中加一个无参构造</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">        <span class="keyword">this</span>.age = age ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name:&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;,age:&quot;</span> + <span class="keyword">this</span>.age ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String school ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(String school)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.school = school ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSchool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.school ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student() ;</span><br><span class="line">        stu.setName(<span class="string">&quot;kouber&quot;</span>) ;</span><br><span class="line">        stu.setAge(<span class="number">18</span>) ;</span><br><span class="line">        stu.setSchool(<span class="string">&quot;aygxy&quot;</span>) ;</span><br><span class="line">        System.out.print(stu.getInfo()) ;<span class="comment">//name:kouber,age:18</span></span><br><span class="line">        System.out.println(<span class="string">&quot;,school:&quot;</span> + stu.getSchool()) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-子类中用super显式指定调用哪个父类构造"><a href="#2-子类中用super显式指定调用哪个父类构造" class="headerlink" title="2.子类中用super显式指定调用哪个父类构造"></a>2.子类中用super显式指定调用哪个父类构造</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">        <span class="keyword">this</span>.age = age ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String school ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age,String School)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age) ;<span class="comment">//明确调父类构造，此语句是在构造方法里面并处于第一行的位置</span></span><br><span class="line">        <span class="keyword">this</span>.school = school ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">&quot;kouber&quot;</span>,<span class="number">18</span>,<span class="string">&quot;aygxy&quot;</span>) ;<span class="comment">//实例化子类对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子类对象实例化流程"><a href="#子类对象实例化流程" class="headerlink" title="子类对象实例化流程"></a>子类对象实例化流程</h2><p>实例化子类对象的同时一定会实例化父类对象，相当于子类构造方法里面隐含一个<code>super()</code></p><p>其实此处实例化父类很好理解，子类继承了父类的属性，那这些继承的属性要有空间存放，而开辟这片空间的其实是父类 ，因此每次实例化子类时，父类也会进行实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A new Person parent class instantiates the object is created&quot;</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>() ; <span class="comment">// 此语句存在与否效果一样</span></span><br><span class="line">        System.out.println(<span class="string">&quot;A new Student class instantiates the object is created&quot;</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Student() ;<span class="comment">//实例化子类对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A new Person parent class instantiates the object</span></span><br><span class="line"><span class="comment">// A new Student class instantiates the object</span></span><br></pre></td></tr></table></figure><p><strong>super()表示的就是子类构造调用父类构造的语句，该语句只允许放在子类构造方法的首行。默认情况下子类只会调用父类的无参构造方法，因此写不写super() 区别不大，但如果父类里面没有提供无参构造，那么必须利用super()明确调用有参构造。</strong>详细代码请看上面<code>extends</code>报错第二个解决方法</p><p><strong><code>super</code>与<code>this</code>都可以调用构造方法，<code>super</code>是子类调用父类的构造，而<code>this</code>是调用本类构造，两者的共同特点是都需要放在构造方法的首行，正因如此两个语句是不能同时存在的。</strong></p><h2 id="继承的相关限制"><a href="#继承的相关限制" class="headerlink" title="继承的相关限制"></a>继承的相关限制</h2><p>Java之中不允许多重继承，只允许多层继承</p><h4 id="多重继承-错误示例"><a href="#多重继承-错误示例" class="headerlink" title="多重继承(错误示例)"></a>多重继承(错误示例)</h4><p>目的是为了同时继承多个类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;&#125; <span class="comment">//这必定报错</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用多层继承实现多重继承的目的"><a href="#使用多层继承实现多重继承的目的" class="headerlink" title="使用多层继承实现多重继承的目的"></a>使用多层继承实现多重继承的目的</h4><p>多层继承就是套娃继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：套娃虽好，但最好不要超过三层</strong></p><h3 id="子类会继承父类所有操作"><a href="#子类会继承父类所有操作" class="headerlink" title="子类会继承父类所有操作"></a>子类会继承父类所有操作</h3><p>但是对于私有操作属于隐式继承，而所有的非私有操作属于显式继承</p><p>看不明白没关系，看下面代码没毛病就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//System.out.println(name) ; //子类不能直接访问父类private属性    </span></span><br><span class="line">        <span class="comment">//报错信息：错误: name 在 Person 中是 private 访问控制</span></span><br><span class="line">        System.out.println(getName()) ;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student() ;</span><br><span class="line">        stu.setName(<span class="string">&quot;kouber&quot;</span>) ;</span><br><span class="line">        stu.fun() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;vscode默认为UTF-8编码，使用时候右下角改为GBK在进行javac的时候就不会中文报错&lt;/p&gt;
&lt;/blo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python基础语法</title>
    <link href="http://example.com/2022/04/18/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2022/04/18/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2022-04-18T04:22:24.000Z</published>
    <updated>2022-07-28T08:22:18.332Z</updated>
    
    <content type="html"><![CDATA[<p><strong>BearKouber的Python学习记录</strong></p><p>简单的笔记</p><h1 id="Python保留字"><a href="#Python保留字" class="headerlink" title="Python保留字"></a>Python保留字</h1><table><thead><tr><th>序号</th><th>保留字</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>and</td><td>逻辑与操作，用于表达式运算</td></tr><tr><td>2</td><td>as</td><td>用于转换数据类型</td></tr><tr><td>3</td><td>assert</td><td>用于判断变量或条件表达式的结果</td></tr><tr><td>4</td><td>async</td><td>用于启用异步操作</td></tr><tr><td>5</td><td>await</td><td>用于异步操作中等待协程返回</td></tr><tr><td>6</td><td>break</td><td>中断循环语句的执行</td></tr><tr><td>7</td><td>class</td><td>定义类</td></tr><tr><td>8</td><td>continue</td><td>继续执行下一次循环</td></tr><tr><td>9</td><td>def</td><td>定义函数或方法</td></tr><tr><td>10</td><td>del</td><td>删除变量或序列的值</td></tr><tr><td>11</td><td>elif</td><td>条件语句，与 if、else 结合使用</td></tr><tr><td>12</td><td>else</td><td>条件语句，与 if、else 结合使用；也可用于异常或循环语句</td></tr><tr><td>13</td><td>except</td><td>包含捕获异常后的处理代码块，与 try、finally 结合使用</td></tr><tr><td>14</td><td>False</td><td>含义为“假”的逻辑值</td></tr><tr><td>15</td><td>finally</td><td>包含捕获异常后的始终要调用的代码块，与 try、except 结合使用</td></tr><tr><td>16</td><td>for</td><td>循环语句</td></tr><tr><td>17</td><td>from</td><td>用于导入模块，与 import 结合使用</td></tr><tr><td>18</td><td>global</td><td>用于在函数或其他局部作用域中使用全局变量</td></tr><tr><td>19</td><td>if</td><td>条件语句，与 elif、else 结合使用</td></tr><tr><td>20</td><td>import</td><td>导入模块，与 from 结合使用</td></tr><tr><td>21</td><td>in</td><td>判断变量是否在序列中</td></tr><tr><td>22</td><td>is</td><td>判断变量是否为某个类的实例</td></tr><tr><td>23</td><td>lambda</td><td>定义匿名函数</td></tr><tr><td>24</td><td>None</td><td>表示一个空对象或是一个特殊的空值</td></tr><tr><td>25</td><td>nonlocal</td><td>用于在函数或其他作用域中使用外层（非全局）变量</td></tr><tr><td>26</td><td>not</td><td>逻辑非操作，用于表达式运算</td></tr><tr><td>27</td><td>or</td><td>逻辑或操作，用于表达式运算</td></tr><tr><td>28</td><td>pass</td><td>空的类、方法或函数的占位符</td></tr><tr><td>29</td><td>raise</td><td>用于抛出异常</td></tr><tr><td>30</td><td>return</td><td>从函数返回计算结果</td></tr><tr><td>31</td><td>True</td><td>含义为“真”的逻辑值</td></tr><tr><td>32</td><td>try</td><td>测试执行可能出现异常的代码，与 except, finally 结合使用</td></tr><tr><td>33</td><td>while</td><td>循环语句</td></tr><tr><td>34</td><td>with</td><td>简化 Python 的语句</td></tr><tr><td>35</td><td>yield</td><td>从函数依次返回值</td></tr></tbody></table><ul><li>在 Python 环境下可以执行以下命令查看当前版本的保留字：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\&gt;&gt;&gt;<span class="keyword">import</span> keyword</span><br><span class="line">\&gt;&gt;&gt;keyword.kwlist</span><br><span class="line">[<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'async'</span>, <span class="string">'await'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure><ul><li>若将保留字作为标识符并赋值将会得到语法错误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\&gt;&gt;&gt;<span class="class"><span class="keyword">class</span>="<span class="title">This</span> <span class="title">is</span> <span class="title">a</span> <span class="title">class</span>"</span></span><br><span class="line"><span class="class"><span class="title">SyntaxError</span>:</span> invalid syntax</span><br></pre></td></tr></table></figure><h3 id="温度转化"><a href="#温度转化" class="headerlink" title="温度转化"></a>温度转化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Tempconvert.py</span></span><br><span class="line">TempStr = <span class="built_in">input</span>(<span class="string">"宝，快输入带有符号的温度值 :"</span>)</span><br><span class="line"><span class="keyword">if</span> TempStr[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">'F'</span>,<span class="string">'f'</span>]:      <span class="comment">#分支语句，如果条件正确，则执行冒号后面缩进的语句，反之跳过</span></span><br><span class="line">    <span class="comment">#TemStr[-1]指倒数数组第一个元素，in判断左边元素有没有在右边数组里面</span></span><br><span class="line">    C = (<span class="built_in">eval</span>(TempStr[<span class="number">0</span>:-<span class="number">1</span>])-<span class="number">32</span>)/<span class="number">1.8</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"转换后的温度是{:.2f}C"</span>.<span class="built_in">format</span>(C))</span><br><span class="line"><span class="keyword">elif</span> TempStr[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">'C'</span>,<span class="string">'c'</span>]:</span><br><span class="line">    F = <span class="number">1.8</span>*<span class="built_in">eval</span>(TempStr[<span class="number">0</span>:-<span class="number">1</span>])+<span class="number">32</span></span><br><span class="line">    <span class="comment">#此处TemStr[0:-1]是这个字符串去掉最后一个单位后的一串数字</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"转换后的温度是{:.2f}F"</span>.<span class="built_in">format</span>(F))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"输入格式错误"</span>)</span><br></pre></td></tr></table></figure><h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><p>由判断条件决定程序运行方向的语句</p><ul><li><strong>保留字：if elif else</strong></li><li>语法：每个保留字所在行末存在<code>:</code></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="输入函数input"><a href="#输入函数input" class="headerlink" title="输入函数input()"></a>输入函数input()</h3><p><strong>从控制台获得用户输入的函数</strong></p><ul><li>格式：<code>&lt;变量&gt; = input(提示信息字符串)</code></li><li>用户输入的信息以字符串的内容保存在&lt;变量&gt;中</li></ul><h3 id="输出函数"><a href="#输出函数" class="headerlink" title="输出函数"></a>输出函数</h3><ul><li>格式：<code>print(&lt;拟输出字符串或字符串变量&gt;)</code></li><li>格式化：<code>print("转化后的温度是{:.2f}".format(C))</code>，{}表示槽，后续变量填充到槽中，{:.2f}表示将变量C填充到这个位置时取小数点后两位</li></ul><p>如果C为123.456，则输出结果为<code>123.45</code></p><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><ul><li>去掉参数最外侧引号并执行余下语句的函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">"1"</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"1+2"</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">'"1+2"'</span>)</span><br><span class="line"><span class="string">'1+2'</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">'print("hello")'</span>)</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h1 id="turtle库"><a href="#turtle库" class="headerlink" title="turtle库"></a>turtle库</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#PythonDraw.py</span></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="comment">#引入绘图库turtle</span></span><br><span class="line">turtle.setup(<span class="number">650</span>, <span class="number">350</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line"><span class="comment">#绘制画图表格</span></span><br><span class="line">turtle.penup()</span><br><span class="line"><span class="comment">#抬笔</span></span><br><span class="line">turtle.fd(-<span class="number">250</span>)</span><br><span class="line"><span class="comment">#倒车</span></span><br><span class="line">turtle.pendown()</span><br><span class="line"><span class="comment">#落笔</span></span><br><span class="line">turtle.pensize(<span class="number">25</span>)</span><br><span class="line"><span class="comment">#画笔粗细</span></span><br><span class="line">turtle.pencolor(<span class="string">"purple"</span>)</span><br><span class="line"><span class="comment">#画笔颜色</span></span><br><span class="line">turtle.seth(-<span class="number">40</span>)</span><br><span class="line"><span class="comment">#方向为-40°</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    turtle.circle(<span class="number">40</span>, <span class="number">80</span>)</span><br><span class="line">    turtle.circle(-<span class="number">40</span>, <span class="number">80</span>)</span><br><span class="line"><span class="comment">#画两条曲线，循环四次</span></span><br><span class="line">turtle.circle(<span class="number">40</span>, <span class="number">80</span>/<span class="number">2</span>)</span><br><span class="line"><span class="comment">#半径40，旋转40°</span></span><br><span class="line">turtle.fd(<span class="number">40</span>)</span><br><span class="line"><span class="comment">#前进40</span></span><br><span class="line">turtle.circle(<span class="number">16</span>, <span class="number">180</span>)</span><br><span class="line"><span class="comment">#半径16，旋转180</span></span><br><span class="line">turtle.fd(<span class="number">40</span> * <span class="number">2</span>/<span class="number">3</span>)</span><br><span class="line">turtle.done()</span><br><span class="line"><span class="comment">#最后行的作用是运行完留下窗体(双击.py文件后)</span></span><br></pre></td></tr></table></figure><h3 id="turtle的绘图窗体setup"><a href="#turtle的绘图窗体setup" class="headerlink" title="turtle的绘图窗体setup()"></a>turtle的绘图窗体setup()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">turtle.setup(width, heigth, startx, starty)</span><br></pre></td></tr></table></figure><ul><li>setup()设置窗体大小及位置</li><li>4各参数中后两个可选</li><li>setup()不是必须的</li><li>setup()括号内参数可以选择性填写</li></ul><h3 id="画线goto"><a href="#画线goto" class="headerlink" title="画线goto()"></a>画线goto()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">turtle.goto(x,y)</span><br></pre></td></tr></table></figure><p>绘制一条从乌龟所在处到坐标(x,y)处的直线</p><h3 id="勇敢龟龟向前冲"><a href="#勇敢龟龟向前冲" class="headerlink" title="勇敢龟龟向前冲"></a>勇敢龟龟向前冲</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">turtle.circle(r,angle)</span><br><span class="line">turtle.fd(d)</span><br><span class="line">turtle.bk(d)</span><br></pre></td></tr></table></figure><ul><li>circle(r,angle)朝海龟面向r方向旋转前进angle<ul><li><code>turtle.circle(r,extend)</code>：根据半径r绘制extend角度的弧形</li><li>默认圆心在龟龟左侧r距离的位置</li><li>extend：绘制角度，不写此参数默认是360度整圆</li></ul></li><li>fd(d)前进d<ul><li><code>turtle.forward(d) </code>–&gt; <code>turtle.fd(d)</code>：直线向前d</li><li>d可以为负数</li></ul></li><li>bk(d)后退d，但是面朝前</li></ul><h3 id="勇敢龟龟转弯"><a href="#勇敢龟龟转弯" class="headerlink" title="勇敢龟龟转弯"></a>勇敢龟龟转弯</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">turtle.seth(angle)</span><br><span class="line">turtle.left(angle)</span><br><span class="line">turtle.right(angle)</span><br></pre></td></tr></table></figure><ul><li>seth(angle)改变龟龟面向方向到angle，原地转向<ul><li><code>turtle.setheading(angle)</code> –&gt; <code>turtle.seth(angle)</code></li><li>angle为龟龟转后面朝的方向</li></ul></li><li>left(angle)左转angle</li><li>right(angle)右转angle</li><li>angle为绝对度数</li></ul><h3 id="勇敢龟龟路径变色"><a href="#勇敢龟龟路径变色" class="headerlink" title="勇敢龟龟路径变色"></a>勇敢龟龟路径变色</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">turtle.colormode(mode)</span><br></pre></td></tr></table></figure><ul><li>mode值为1.0：RGB小数值模式</li><li>mode值为255：RGB整数值模式</li></ul><h4 id="RGB色彩-由三种颜色构成的万物色-小知识"><a href="#RGB色彩-由三种颜色构成的万物色-小知识" class="headerlink" title="RGB色彩(由三种颜色构成的万物色)小知识"></a>RGB色彩(由三种颜色构成的万物色)小知识</h4><ul><li>RGB指红蓝绿三个通道的颜色组合</li><li>覆盖视力所能感知的所有颜色</li><li>RGB每色取值范围0-255整数或0-1小数</li></ul><h5 id="常用RGB色彩"><a href="#常用RGB色彩" class="headerlink" title="常用RGB色彩"></a>常用RGB色彩</h5><ul><li>白色：<strong>rgb</strong>(255,255,255)</li><li>黑色：<strong>rgb</strong>(0,0,0)</li><li>红色：<strong>rgb</strong>(255,0,0)</li><li>绿色：<strong>rgb</strong>(0,255,0)</li><li>蓝色：<strong>rgb</strong>(0,0,255)</li><li><strong>青色</strong>：<strong>rgb</strong>(0,255,255)</li><li>紫色：<strong>rgb</strong>(255,0,255)</li></ul><h2 id="import库引用"><a href="#import库引用" class="headerlink" title="import库引用"></a>import库引用</h2><p>扩充Python程序功能的方式</p><ul><li>使用import保留字完成，采用<a>,<b>()编码风格</b></a></li><li>使用库方法：import &lt;库名&gt;</li><li>使用该库函数方法：&lt;库名&gt;.&lt;函数名&gt;(&lt;函数参数&gt;)</li></ul><h3 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h3><h4 id="1-使用from和import保留字共同完成"><a href="#1-使用from和import保留字共同完成" class="headerlink" title="1.使用from和import保留字共同完成"></a>1.使用from和import保留字共同完成</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> &lt;库名&gt; <span class="keyword">import</span>*</span><br></pre></td></tr></table></figure><p>使用import*修改原代码可得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span>*</span><br><span class="line">setup(<span class="number">650</span>, <span class="number">350</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">penup()</span><br><span class="line">fd(-<span class="number">250</span>)</span><br><span class="line">pendown()</span><br><span class="line">pensize(<span class="number">25</span>)</span><br><span class="line">pencolor(<span class="string">"purple"</span>)</span><br><span class="line">seth(-<span class="number">40</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    turtle.circle(<span class="number">40</span>, <span class="number">80</span>)</span><br><span class="line">    turtle.circle(-<span class="number">40</span>, <span class="number">80</span>)</span><br><span class="line">circle(<span class="number">40</span>, <span class="number">80</span>/<span class="number">2</span>)</span><br><span class="line">fd(<span class="number">40</span>)</span><br><span class="line">circle(<span class="number">16</span>, <span class="number">180</span>)</span><br><span class="line">fd(<span class="number">40</span> * <span class="number">2</span>/<span class="number">3</span>)</span><br><span class="line">done()</span><br></pre></td></tr></table></figure><h4 id="2-使用import和as保留字共同完成"><a href="#2-使用import和as保留字共同完成" class="headerlink" title="2.使用import和as保留字共同完成"></a>2.使用import和as保留字共同完成</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &lt;库名&gt; <span class="keyword">as</span> &lt;库别名&gt;</span><br></pre></td></tr></table></figure><ul><li>给调用的外部库关联一个更短更适合自己的名字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"><span class="comment">#引入绘图库turtle</span></span><br><span class="line">t.setup(<span class="number">650</span>, <span class="number">350</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.fd(-<span class="number">250</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.pensize(<span class="number">25</span>)</span><br><span class="line">t.pencolor(<span class="string">"purple"</span>)</span><br><span class="line">t.seth(-<span class="number">40</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    turtle.circle(<span class="number">40</span>, <span class="number">80</span>)</span><br><span class="line">    turtle.circle(-<span class="number">40</span>, <span class="number">80</span>)</span><br><span class="line">t.circle(<span class="number">40</span>, <span class="number">80</span>/<span class="number">2</span>)</span><br><span class="line">t.fd(<span class="number">40</span>)</span><br><span class="line">t.circle(<span class="number">16</span>, <span class="number">180</span>)</span><br><span class="line">t.fd(<span class="number">40</span> * <span class="number">2</span>/<span class="number">3</span>)</span><br><span class="line">t.done()</span><br></pre></td></tr></table></figure><h2 id="画笔控制函数"><a href="#画笔控制函数" class="headerlink" title="画笔控制函数"></a>画笔控制函数</h2><p>画笔操作后一直有效，一般成对出现</p><h4 id="抬起画笔，龟龟在飞行"><a href="#抬起画笔，龟龟在飞行" class="headerlink" title="抬起画笔，龟龟在飞行"></a>抬起画笔，龟龟在飞行</h4><ul><li><code>turtle.penup()</code></li><li><code>turtle.pu()</code></li></ul><h3 id="落下画笔，龟龟爬行"><a href="#落下画笔，龟龟爬行" class="headerlink" title="落下画笔，龟龟爬行"></a>落下画笔，龟龟爬行</h3><ul><li><code>turtle.pendown()</code></li><li><code>turtle.pd()</code></li></ul><p>画笔设置后一直有效，直至下次重新设置</p><h3 id="龟龟腰围"><a href="#龟龟腰围" class="headerlink" title="龟龟腰围"></a>龟龟腰围</h3><ul><li><code>turtle.pensize(width)</code></li><li><code>turtle.width(width)</code></li><li>设置画笔宽度，当无参数输入时返回当前画笔宽度</li></ul><h3 id="龟龟颜色"><a href="#龟龟颜色" class="headerlink" title="龟龟颜色"></a>龟龟颜色</h3><ul><li><code>turtle.pencolor(color)</code></li></ul><h4 id="color有三种形式"><a href="#color有三种形式" class="headerlink" title="color有三种形式"></a>color有三种形式</h4><ul><li>颜色字符串：<code>turtle.pencolor("purple")</code></li><li>RGB的小数值：<code>turtle.pencolor(0.63,0.13,0.94)</code></li><li>RGB的元组值：<code>turtle.pencolor((0.63,0.13,0.94))</code></li></ul><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>按照一定次数循环执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;变量&gt; <span class="keyword">in</span> <span class="built_in">range</span> (&lt;参数&gt;)</span><br><span class="line">&lt;被循环执行的语句&gt;</span><br></pre></td></tr></table></figure><ul><li>变量：每次循环的计数，0到次数-1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a>range()函数</h2><p>产生循环计数序列</p><ul><li><code>range(N)</code>:产生0到N-1的正数序列，共N个</li><li><code>range(M,N)</code>:产生M到N-1的整数序列，共N-M个</li><li><code>range(start, stop, step)</code><ul><li>start：表示从返回序列的起始编号，默认情况下从0开始</li><li>stop：表示生成最多但不包括此数字的数字</li><li>step：指的是序列中每个数字之间的差异，默认值为1</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">21</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> x:</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    </span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure><h1 id="数字类型与操作"><a href="#数字类型与操作" class="headerlink" title="数字类型与操作"></a>数字类型与操作</h1><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><ul><li><p>可正可负，没有取值范围限制</p></li><li><p>四种进制表示形式</p><ul><li>十进制</li><li>二进制以0b或0B开头</li><li>八进制，以0o或0O开头</li><li>十六进制，以0x或OX开头</li></ul></li></ul><h3 id="pow-x-y"><a href="#pow-x-y" class="headerlink" title="pow(x,y)"></a>pow(x,y)</h3><ul><li>计算x的y次方，无长度限制</li></ul><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><h4 id="运算存在不确定尾数，不是bug"><a href="#运算存在不确定尾数，不是bug" class="headerlink" title="运算存在不确定尾数，不是bug"></a>运算存在不确定尾数，不是bug</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.3</span></span><br><span class="line"><span class="number">0.4</span></span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span></span><br><span class="line"><span class="number">0.30000000000000004</span></span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>[为什么](<a class="link" href="https://www.cnblogs.com/mooncher/p/5145571.html">为什么0.1+0.2=0.30000000000000004 - 月井石 - 博客园 (cnblogs.com)<i class="fas fa-external-link-alt"></i></a>)</p><h4 id="解决方法round"><a href="#解决方法round" class="headerlink" title="解决方法round()"></a>解决方法round()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">round</span>(<span class="number">0.1</span>+<span class="number">0.2</span>, <span class="number">1</span>) == <span class="number">0.3</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li><code>round(x, d)</code>:对x四舍五入，d是小数截取位数</li><li>浮点数间运算及比较用round()函数辅助</li><li>不确定尾数一般发生在10的负16次方左右，<code>round()</code>十分有效</li></ul><h4 id="科学计数法"><a href="#科学计数法" class="headerlink" title="科学计数法"></a>科学计数法</h4><ul><li>使用字母e或E作为幂的符号，以10为基数，格式如下：<ul><li><a>e<b> 表示a乘10的b次方</b></a></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5e2</span></span><br><span class="line"><span class="number">500.0</span></span><br></pre></td></tr></table></figure><h3 id="复数类型"><a href="#复数类型" class="headerlink" title="复数类型"></a>复数类型</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.462ex" xmlns="http://www.w3.org/2000/svg" width="8.77ex" height="2.65ex" role="img" focusable="false" viewBox="0 -967.3 3876.6 1171.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(689.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msqrt" transform="translate(1745.6,0)"><g transform="translate(853,0)"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(0,107.3)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="1278" height="60" x="853" y="847.3"></rect></g></g></g></svg></mjx-container></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">z = <span class="number">1.23e-4</span> + <span class="number">5.6e+89j</span></span><br><span class="line"><span class="built_in">print</span>(z.real)</span><br><span class="line"><span class="number">0.000123</span></span><br></pre></td></tr></table></figure><h3 id="数值运算操作符"><a href="#数值运算操作符" class="headerlink" title="数值运算操作符"></a>数值运算操作符</h3><table><thead><tr><th>x//y</th><th>整数除，x与y之整数商 10//3结果是3</th></tr></thead><tbody><tr><td>x**y</td><td>幂运算x的y次方，当y是小数时，开方运算</td></tr></tbody></table><h3 id="数字类型的关系"><a href="#数字类型的关系" class="headerlink" title="数字类型的关系"></a>数字类型的关系</h3><p>类型间可进行混合运算，生成结果为”最宽”类型</p><p><strong>整数 –&gt; 浮点数 –&gt; 复数</strong></p><h3 id="数值运算函数"><a href="#数值运算函数" class="headerlink" title="数值运算函数"></a>数值运算函数</h3><h4 id="abs-：计算绝对值"><a href="#abs-：计算绝对值" class="headerlink" title="abs()：计算绝对值"></a>abs()：计算绝对值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">abs</span>(-<span class="number">10</span>)</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="divmod-：计算商与余数"><a href="#divmod-：计算商与余数" class="headerlink" title="divmod()：计算商与余数"></a>divmod()：计算商与余数</h4><ul><li>返回的元组第一个是整数商，第二个是余数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a,b=<span class="built_in">divmod</span>(<span class="number">10</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br><span class="line"><span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="pow-函数：计算幂次方"><a href="#pow-函数：计算幂次方" class="headerlink" title="pow()函数：计算幂次方"></a>pow()函数：计算幂次方</h4><ul><li>可以有三个参数</li><li><code>pow(x,y)</code>:x的y次方</li><li><code>pow(x,y,z)</code>:(x**y)%z</li><li>可以求一个数的后n位</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">pow</span>(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">b = <span class="built_in">pow</span>(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br><span class="line"><span class="number">9</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="built_in">pow</span>(<span class="number">3</span>,<span class="number">10</span>,<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="number">49</span></span><br></pre></td></tr></table></figure><h4 id="round-：返回浮点数的四舍五入值"><a href="#round-：返回浮点数的四舍五入值" class="headerlink" title="round()：返回浮点数的四舍五入值"></a>round()：返回浮点数的四舍五入值</h4><ul><li><code>round(x)</code></li><li><code>round(x,n)</code>:n是保留小数位数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">round</span>(-<span class="number">10.2365</span>)</span><br><span class="line">b = <span class="built_in">round</span>(-<span class="number">10.2365</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br><span class="line">-<span class="number">10</span> -<span class="number">10.24</span></span><br></pre></td></tr></table></figure><h4 id="max-和min"><a href="#max-和min" class="headerlink" title="max()和min()"></a>max()和min()</h4><ul><li><code>max()</code>计算多个数字里面的最大值</li><li><code>min()</code>计算多个数字里面的最小值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">654</span>,<span class="number">0</span>,-<span class="number">456</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(S))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(S))</span><br><span class="line"><span class="number">654</span></span><br><span class="line">-<span class="number">456</span></span><br></pre></td></tr></table></figure><h4 id="int-x-将x变成整数，舍弃小数部分"><a href="#int-x-将x变成整数，舍弃小数部分" class="headerlink" title="int(x):将x变成整数，舍弃小数部分"></a>int(x):将x变成整数，舍弃小数部分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="number">123.45</span>)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="built_in">int</span>(<span class="string">"1234"</span>)</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h4 id="float-x-将x变成浮点数，增加小数部分"><a href="#float-x-将x变成浮点数，增加小数部分" class="headerlink" title="float(x):将x变成浮点数，增加小数部分"></a>float(x):将x变成浮点数，增加小数部分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">float</span>(<span class="number">12</span>)</span><br><span class="line"><span class="number">12.0</span></span><br><span class="line"><span class="built_in">float</span>(<span class="string">"1.23"</span>)</span><br><span class="line"><span class="number">1.23</span></span><br></pre></td></tr></table></figure><h4 id="complex-将x变成复数，增加虚数部分"><a href="#complex-将x变成复数，增加虚数部分" class="headerlink" title="complex:将x变成复数，增加虚数部分"></a>complex:将x变成复数，增加虚数部分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">complex</span>(<span class="number">4</span>)</span><br><span class="line">(<span class="number">4</span>+<span class="number">0j</span>)</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DayDayUp.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dayUP</span>(<span class="params">df</span>):</span></span><br><span class="line">    dayup = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">365</span>):</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> <span class="built_in">range</span></span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>有两类共四种表示方法</p><ul><li>由一对单引号或双引号表示，仅表示单行字符串</li><li>由一对三单引号或三双引号表示，可表示多行字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''Python</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">语言 '''</span></span><br></pre></td></tr></table></figure><blockquote><p>python里面没有真正提供多行注释，三单引号其实是字符串</p></blockquote><h3 id="字符串中出现单引号或双引号怎么办"><a href="#字符串中出现单引号或双引号怎么办" class="headerlink" title="字符串中出现单引号或双引号怎么办"></a>字符串中出现单引号或双引号怎么办</h3><h4 id="使用转义符"><a href="#使用转义符" class="headerlink" title="使用转义符 \"></a>使用转义符 \</h4><ul><li>转义表达特定字符的本意</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">" 双引号\" "</span>)</span><br><span class="line"> 双引号<span class="string">" </span></span><br></pre></td></tr></table></figure><ul><li>转义符形成的一些组合，表达一些不可打印的含义：<code>\b</code>回退，<code>\r</code>回车</li></ul><h4 id="不使用转义符"><a href="#不使用转义符" class="headerlink" title="不使用转义符"></a>不使用转义符</h4><ul><li>出现单引号，使用双引号表示字符串</li><li>出现双引号，使用单引号表示字符串</li><li>都出现，使用三引号表示字符串</li></ul><h3 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h3><ul><li><p>字符串[M:N:K]</p></li><li><p>M缺失表示至开头，N缺失表示至结尾</p></li><li><p>K为根据步长K对字符串切片</p></li><li><p>返回字符串中一段字符字串</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"BearKouber"</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">4</span>:-<span class="number">1</span>])</span><br><span class="line">Koube</span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">4</span>:])</span><br><span class="line">Kouber</span><br><span class="line"><span class="built_in">print</span>(name[::<span class="number">2</span>])</span><br><span class="line">BaKue</span><br><span class="line"><span class="built_in">print</span>(name[::-<span class="number">1</span>])</span><br><span class="line">rebuoKraeB</span><br></pre></td></tr></table></figure><h3 id="字符串操作符"><a href="#字符串操作符" class="headerlink" title="字符串操作符"></a>字符串操作符</h3><table><thead><tr><th>操作符及使用</th><th>描述</th></tr></thead><tbody><tr><td>x + y</td><td>连接两个字符串x和y</td></tr><tr><td>n * x 或 x * n</td><td>复制n次字符串x</td></tr><tr><td>x in s</td><td>如果x是s的字串，返回True，否则返回False</td></tr></tbody></table><h3 id="星期转换"><a href="#星期转换" class="headerlink" title="星期转换"></a>星期转换</h3><h4 id="直接版本"><a href="#直接版本" class="headerlink" title="直接版本"></a>直接版本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#weekname.py</span></span><br><span class="line">week = <span class="string">"星期一星期二星期三星期四星期五星期六星期日"</span></span><br><span class="line">weekId = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">pos = (weekId - <span class="number">1</span>) * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(week[pos:pos+<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h4 id="优化版本"><a href="#优化版本" class="headerlink" title="优化版本"></a>优化版本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#weekname.py</span></span><br><span class="line">week = [<span class="string">"一二三四五六日"</span>]</span><br><span class="line">weekId = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"星期"</span> + week[weekID-<span class="number">1</span>])</span><br><span class="line">weedId = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">"请输入星期数字(1-7)"</span>))</span><br></pre></td></tr></table></figure><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h4><h4 id="str"><a href="#str" class="headerlink" title="str()"></a>str()</h4><h4 id="hex-oct"><a href="#hex-oct" class="headerlink" title="hex() oct()"></a>hex() oct()</h4><h4 id="chr"><a href="#chr" class="headerlink" title="chr()"></a>chr()</h4><h4 id="ord"><a href="#ord" class="headerlink" title="ord()"></a>ord()</h4><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>len(x)</td><td>返回字符串x的长度</td></tr><tr><td>str(x)</td><td>任意类型x所对应的字符串形式，与eval相反</td></tr><tr><td>hex(x)或oct(x)</td><td>整数x的十六进制或八进制小写形式字符串</td></tr><tr><td>chr(u)</td><td>u为Unicode编码，返回其对应的字符</td></tr><tr><td>ord(x)</td><td>x为字符，返回其对应的Unicode编码</td></tr></tbody></table><hr><h3 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h3><h3 id="字符串处理方法"><a href="#字符串处理方法" class="headerlink" title="字符串处理方法"></a>字符串处理方法</h3><table><thead><tr><th>方法及使用</th><th>描述</th></tr></thead><tbody><tr><td>str.lower  /  str.upper</td><td>全部字符小写/大写</td></tr><tr><td>str.split(sep=None)</td><td>返回一个列表，由str根据sep被分隔的部分组成</td></tr><tr><td>str.count(sub)</td><td>返回子串sub在str中出现的次数</td></tr><tr><td>str.replace(old,new)</td><td>所有old子串被替换为new</td></tr><tr><td>str.center(width[,fillchar])</td><td>字符串str根据宽度width居中，fillchar可选</td></tr><tr><td>str.strip(chars)</td><td>从str中去掉在其左侧和右侧chars中列出的字符</td></tr><tr><td>str.join(iter)</td><td>在iter变量除最后元素外每个元素后增加一个str，主要用于字符串分隔</td></tr></tbody></table><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"AbCdEfGh"</span>.lower()</span><br><span class="line"><span class="string">'abcdefgh'</span></span><br><span class="line"></span><br><span class="line"><span class="string">"A,B,C"</span>.split(<span class="string">","</span>)</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">"an apple"</span>.count(<span class="string">"a"</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="string">"BearKouber"</span>.replace(<span class="string">"r"</span>,<span class="string">"rr.tt"</span>)</span><br><span class="line"><span class="string">'Bearr.ttKouberr.tt'</span></span><br><span class="line"></span><br><span class="line"><span class="string">"BearKouber"</span>.center(<span class="number">20</span>,<span class="string">"-"</span>)</span><br><span class="line"><span class="string">'-----BearKouber-----'</span></span><br><span class="line"></span><br><span class="line"><span class="string">"-- Bear Koub e r--"</span>.strip(<span class="string">" -Bber"</span>)</span><br><span class="line"><span class="string">'ar Kou'</span></span><br><span class="line"></span><br><span class="line"><span class="string">","</span>.join(<span class="string">"123456"</span>)</span><br><span class="line"><span class="string">'1,2,3,4,5,6'</span></span><br></pre></td></tr></table></figure><h4 id="字符串格式化-format-方法"><a href="#字符串格式化-format-方法" class="headerlink" title="字符串格式化.format()方法"></a>字符串格式化.format()方法</h4><blockquote><p>格式化是对字符串进行格式表达的方式</p></blockquote><p>&lt;模板字符串&gt;.format(&lt;都好分隔的参数&gt;)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"{}:计算机{}的CPU占用率为{}%"</span>.<span class="built_in">format</span>(<span class="string">"2018-10-10"</span>,<span class="string">"C"</span>,<span class="number">10</span>)</span><br><span class="line"><span class="string">'2018-10-10:计算机C的CPU占用率为10%'</span></span><br><span class="line"><span class="string">"{2}:计算机{0}的CPU占用率为{1}%"</span>.<span class="built_in">format</span>(<span class="string">"2018-10-10"</span>,<span class="string">"C"</span>,<span class="number">10</span>)</span><br><span class="line"><span class="string">'10:计算机2018-10-10的CPU占用率为C%'</span></span><br></pre></td></tr></table></figure><h4 id="format-方法的格式控制"><a href="#format-方法的格式控制" class="headerlink" title="format()方法的格式控制"></a>format()方法的格式控制</h4><table><thead><tr><th>:</th><th>&lt;填充&gt;</th><th>&lt;对齐&gt;</th><th>&lt;宽度&gt;</th><th>&lt;,&gt;  &lt;.精度&gt;  &lt;类型&gt;</th></tr></thead><tbody><tr><td>引导符号</td><td>用于填充的单个字符</td><td><code>&lt; 左对齐</code>  <code>&gt;右对齐</code>   <code>^居中对齐</code></td><td>槽设定的输出宽度</td><td></td></tr></tbody></table><table><thead><tr><th>&lt;,&gt;</th><th>&lt;.精度&gt;</th><th>&lt;类型&gt;</th></tr></thead><tbody><tr><td>数字的千位分隔符</td><td>浮点数小数精度或字符串最大输出长度</td><td>整数类型b,c,d,o,x,X浮点数类型e,E,f,%</td></tr></tbody></table><p><strong>for example</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"{0:=^20}"</span>.<span class="built_in">format</span>(<span class="string">"PYTHON"</span>)</span><br><span class="line"><span class="string">'=======PYTHON======='</span></span><br><span class="line"><span class="string">"{0:*&gt;20}"</span>.<span class="built_in">format</span>(<span class="string">"BIT"</span>)</span><br><span class="line"><span class="string">'*****************BIT'</span></span><br><span class="line"><span class="string">"{:10}"</span>.<span class="built_in">format</span>(<span class="string">"BIT"</span>)</span><br><span class="line"><span class="string">'BIT       '</span></span><br><span class="line"><span class="comment">#默认情况下填充为空格</span></span><br><span class="line"><span class="string">"{0:,.2f}"</span>.<span class="built_in">format</span>(<span class="number">12345.6789</span>)</span><br><span class="line"><span class="string">'12,345.68'</span></span><br><span class="line"><span class="string">"{0:b},{0:c},{0:d},{0:o},{0:x},{0:X}"</span>.<span class="built_in">format</span>(<span class="number">425</span>)</span><br><span class="line"><span class="string">'110101001,Ʃ,425,651,1a9,1A9'</span></span><br><span class="line"><span class="string">"{0:e},{0:E},{0:f},{0:%}"</span>.<span class="built_in">format</span>(<span class="number">3.14</span>)</span><br><span class="line"><span class="string">'3.140000e+00,3.140000E+00,3.140000,314.000000%'</span></span><br></pre></td></tr></table></figure><h1 id="time库的使用"><a href="#time库的使用" class="headerlink" title="time库的使用"></a>time库的使用</h1><h3 id="time"><a href="#time" class="headerlink" title="time()"></a>time()</h3><h3 id="ctime"><a href="#ctime" class="headerlink" title="ctime()"></a>ctime()</h3><h3 id="gmtime"><a href="#gmtime" class="headerlink" title="gmtime()"></a>gmtime()</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>time()</td><td>获取当前时间戳，即计算机内部时间值(浮点数)<code>time.time()</code></td></tr><tr><td>ctime()</td><td>获取当前时间并以易读方式表示，返回字符串<code>time.ctime()</code></td></tr><tr><td>gmtime()</td><td>获取当前时间，表示为计算机可处理的时间格式<code>time.gmtime()</code></td></tr></tbody></table><ul><li><p>time()获取从1970年1月1日0:00开始到现在的时间(秒/s)</p></li><li><p>ctime()是time库里面获取清楚时间的最简单的函数</p></li><li><p>gmtime()获取的格式被称为<code>struct_time</code>格式 </p></li></ul><h2 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h2><h3 id="strftime"><a href="#strftime" class="headerlink" title="strftime()"></a>strftime()</h3><h3 id="strptime"><a href="#strptime" class="headerlink" title="strptime()"></a>strptime()</h3><p>将时间以合理方式展示出来</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>strftime(tpl,ts)</td><td>tpl是格式化模板字符串，用来定义输出结果ts是计算机内部时间类型变量</td></tr><tr><td>strptime(str,tpl)</td><td>str是字符串形式的时间值 tpl是格式化模板字符串，用来定义输入效果</td></tr></tbody></table><p><strong>strftime()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = time.gmtime()</span><br><span class="line">time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,t)</span><br><span class="line"></span><br><span class="line"><span class="string">'2022-05-01 07:15:14'</span></span><br></pre></td></tr></table></figure><p><strong>strptime()</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">timeStr = <span class="string">'2022-05-01 07:15:14'</span></span><br><span class="line">time.strptime(timeStr,<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"></span><br><span class="line">time.struct_time(tm_year=<span class="number">2022</span>, tm_mon=<span class="number">5</span>, tm_mday=<span class="number">1</span>, tm_hour=<span class="number">7</span>, tm_min=<span class="number">15</span>, tm_sec=<span class="number">14</span>, tm_wday=<span class="number">6</span>, tm_yday=<span class="number">121</span>, tm_isdst=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="六个时间格式化控制符"><a href="#六个时间格式化控制符" class="headerlink" title="六个时间格式化控制符"></a>六个时间格式化控制符</h3><table><thead><tr><th>格式化字符串</th><th>日期/时间说明</th><th>值范围和实例</th></tr></thead><tbody><tr><td>%a</td><td>星期缩写</td><td>Mon~Sun，例如：Wed</td></tr><tr><td>%H</td><td>小时(24h制)</td><td>00~23，例如：12</td></tr><tr><td>%I</td><td>小时(12h制)</td><td>01~12，例如：7</td></tr><tr><td>%p</td><td>上/下午</td><td>AM，PM，例如：PM</td></tr><tr><td>%M</td><td>分钟</td><td>00~59，例如：26</td></tr><tr><td>%S</td><td>秒</td><td>00~59，例如：26</td></tr></tbody></table><h2 id="程序计时"><a href="#程序计时" class="headerlink" title="程序计时"></a>程序计时</h2><ul><li>程序计时指测量起止动作所经历时间的过程</li><li>测量时间：perf_counter()</li><li>产生时间：sleep()</li></ul><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>perf_counter()</td><td>返回一个CPU级别的精确时间计数值，单位为秒，由于这个计数起点不确定，连续调用差值才有意义</td></tr><tr><td>sleep(s)</td><td>s拟休眠的时间，单位是秒，可以是浮点数</td></tr></tbody></table><h3 id="perf-counter"><a href="#perf-counter" class="headerlink" title="perf_counter()"></a>perf_counter()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="number">170007.1174668</span></span><br><span class="line">end = time.perf_counter()</span><br><span class="line"><span class="number">170037.5930695</span></span><br><span class="line">end - start</span><br><span class="line"><span class="number">30.47560269999667</span></span><br></pre></td></tr></table></figure><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait</span>():</span></span><br><span class="line">    time.sleep(<span class="number">3.3</span>)</span><br><span class="line">wait()<span class="comment">#程序将等待3.3秒后再退出</span></span><br></pre></td></tr></table></figure><h2 id="文本进度条"><a href="#文本进度条" class="headerlink" title="文本进度条"></a>文本进度条</h2><p>文本进度条 简单的开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#TextProBarV1.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">scale = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------执行开始------"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(scale+<span class="number">1</span>):</span><br><span class="line">    a = <span class="string">'*'</span> * i</span><br><span class="line">    b = <span class="string">'.'</span> * (scale - i)</span><br><span class="line">    c = (i/scale)*<span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"{:^3.0f}%[{}-&gt;{}]"</span>.<span class="built_in">format</span>(c,a,b))</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------执行结束------"</span>)</span><br><span class="line"></span><br><span class="line">------执行开始------</span><br><span class="line"> <span class="number">0</span> %[-&gt;..........]</span><br><span class="line"><span class="number">10</span> %[*-&gt;.........]</span><br><span class="line"><span class="number">20</span> %[**-&gt;........]</span><br><span class="line"><span class="number">30</span> %[***-&gt;.......]</span><br><span class="line"><span class="number">40</span> %[****-&gt;......]</span><br><span class="line"><span class="number">50</span> %[*****-&gt;.....]</span><br><span class="line"><span class="number">60</span> %[******-&gt;....]</span><br><span class="line"><span class="number">70</span> %[*******-&gt;...]</span><br><span class="line"><span class="number">80</span> %[********-&gt;..]</span><br><span class="line"><span class="number">90</span> %[*********-&gt;.]</span><br><span class="line"><span class="number">100</span>%[**********-&gt;]</span><br><span class="line">------执行结束------</span><br></pre></td></tr></table></figure><h3 id="文本进度条-单行动态刷新"><a href="#文本进度条-单行动态刷新" class="headerlink" title="文本进度条 单行动态刷新"></a>文本进度条 单行动态刷新</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#TextProBarV2.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\r{:3}%"</span>.<span class="built_in">format</span>(i), end=<span class="string">""</span>)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line"><span class="comment">#此处\r是使每次打印都能使光标退回到当前行的行首</span></span><br><span class="line"><span class="comment">#此处默认end为"\n",如果不想要print换行就把它改为空</span></span><br><span class="line"><span class="comment">#此程序在IDLE上F5运行不会出现单行刷新的效果而是把进度全部输出，需要在控制台执行才能实现单行刷新</span></span><br></pre></td></tr></table></figure><h3 id="文本进度条-实例完整效果"><a href="#文本进度条-实例完整效果" class="headerlink" title="文本进度条 实例完整效果"></a>文本进度条 实例完整效果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#TextProBarV3.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">scale = <span class="number">50</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"执行开始"</span>.center(scale//<span class="number">2</span>, <span class="string">"-"</span>))</span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(scale+<span class="number">1</span>):</span><br><span class="line">    a = <span class="string">'*'</span> * i</span><br><span class="line">    b = <span class="string">'.'</span> * (scale - i)</span><br><span class="line">    c = (i/scale)*<span class="number">100</span></span><br><span class="line">    dur = time.perf_counter() - start</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\r{:^3.0f}%[{}-&gt;{}]{:.2f}s"</span>.<span class="built_in">format</span>(c,a,b,dur),end=<span class="string">''</span>)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\n"</span>+<span class="string">"执行结束"</span>.center(scale//<span class="number">2</span>,<span class="string">'-'</span>))</span><br></pre></td></tr></table></figure><h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><h3 id="单分支结构"><a href="#单分支结构" class="headerlink" title="单分支结构"></a>单分支结构</h3><p>根据判断结果而选择不同向前路径的运行方式    </p><p>单分支示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">guess = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> guess == <span class="number">99</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"猜对了"</span>)</span><br></pre></td></tr></table></figure><h3 id="二分支结构"><a href="#二分支结构" class="headerlink" title="二分支结构"></a>二分支结构</h3><p>根据判断条件结果而选择不同向前路径的运行方式</p><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">guess = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> guess == <span class="number">99</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"猜对了"</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"猜错了"</span>)</span><br></pre></td></tr></table></figure><h4 id="二分支紧凑形式"><a href="#二分支紧凑形式" class="headerlink" title="二分支紧凑形式"></a>二分支紧凑形式</h4><p>&lt;表达式1&gt; if &lt;条件&gt; else &lt;表达式2&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">guess = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"猜{}了"</span>.<span class="built_in">format</span>(<span class="string">"对"</span> <span class="keyword">if</span> guess==<span class="number">99</span> <span class="keyword">else</span> <span class="string">"错"</span>))</span><br></pre></td></tr></table></figure><p><strong>使用此形式没有赋值过程</strong></p><h3 id="多分支结构"><a href="#多分支结构" class="headerlink" title="多分支结构"></a>多分支结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    grade = <span class="string">"A"</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">    grade = <span class="string">"B"</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">    grade = <span class="string">"C"</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">    grade = <span class="string">"D"</span></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    grade = <span class="string">"E"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"输出成绩属于级别{}"</span>.<span class="built_in">format</span>(grade))</span><br></pre></td></tr></table></figure><h3 id="条件组合保留字"><a href="#条件组合保留字" class="headerlink" title="条件组合保留字"></a>条件组合保留字</h3><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>x <code>and</code> y</td><td>两个条件x和y的逻辑<strong>与</strong></td></tr><tr><td>x <code>or</code> y</td><td>两个条件x和y的逻辑<strong>或</strong></td></tr><tr><td><code>not</code> x</td><td>条件x的逻辑<strong>非</strong></td></tr></tbody></table><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">guess = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> guess &gt; <span class="number">99</span> <span class="keyword">or</span> guess &lt; <span class="number">99</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"猜错了"</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"猜对了"</span>) </span><br></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> :</span><br><span class="line">    &lt;语块<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">except</span> &lt;异常类型&gt; :  <span class="comment">#此处异常类型不写相应所有异常，写了表示为仅相应该异常类型</span></span><br><span class="line">    &lt;语块<span class="number">2</span>&gt;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> :</span><br><span class="line">    num = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">"请输入一个整数:"</span>))</span><br><span class="line">    <span class="built_in">print</span>(num**<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"输入不是整数"</span>)</span><br></pre></td></tr></table></figure><h4 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> :</span><br><span class="line">    &lt;语块<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">except</span> :</span><br><span class="line">    &lt;语块<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">else</span> : <span class="comment">#对应语块3在不发生异常时执行</span></span><br><span class="line">    &lt;语块<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">finally</span> : <span class="comment">#对应语块4一定执行</span></span><br><span class="line">    &lt;语块<span class="number">4</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="身体质量指数BMI"><a href="#身体质量指数BMI" class="headerlink" title="身体质量指数BMI"></a>身体质量指数BMI</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CalBMIv3.py</span></span><br><span class="line">height, weight = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">"请输入身高(米)和体重(公斤)[逗号隔开]: "</span>))</span><br><span class="line">bmi = weight / <span class="built_in">pow</span>(height, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"BMI 数值为：{:.2f}"</span>.<span class="built_in">format</span>(bmi))</span><br><span class="line">who, nat = <span class="string">""</span>, <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> bmi &lt; <span class="number">18.5</span>:</span><br><span class="line">    who, nat = <span class="string">"偏瘦"</span>, <span class="string">"偏瘦"</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">18.5</span> &lt;= bmi &lt; <span class="number">24</span>:</span><br><span class="line">    who, nat = <span class="string">"正常"</span>, <span class="string">"正常"</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">24</span> &lt;= bmi &lt; <span class="number">25</span>:</span><br><span class="line">    who, nat = <span class="string">"正常"</span>, <span class="string">"偏胖"</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">25</span> &lt;= bmi &lt; <span class="number">28</span>:</span><br><span class="line">    who, nat = <span class="string">"偏胖"</span>, <span class="string">"偏胖"</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">28</span> &lt;= bmi &lt; <span class="number">30</span>:</span><br><span class="line">    who, nat = <span class="string">"偏胖"</span>, <span class="string">"肥胖"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    who, nat = <span class="string">"肥胖"</span>, <span class="string">"肥胖"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"BMI 指标为:国际'{0}', 国内'{1}'"</span>.<span class="built_in">format</span>(who, nat))</span><br></pre></td></tr></table></figure><blockquote><p> 注意：多分支条件不要互相覆盖，阅读代码先看分支条件再看分支语句</p></blockquote><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="遍历循环"><a href="#遍历循环" class="headerlink" title="遍历循环"></a>遍历循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;循环变量&gt; <span class="keyword">in</span> &lt;遍历结构&gt; :</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure><ul><li>每次循环，从遍历结构中所获得的元素放入循环变量，并执行一次语句块</li></ul><h4 id="计数循环"><a href="#计数循环" class="headerlink" title="计数循环"></a>计数循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N) :</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure><ul><li>遍历由range()函数产生的数字序列，产生循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(M,N,K) :</span><br><span class="line">    &lt;语句块&gt;</span><br><span class="line"><span class="comment">#range(M,N,K)会产生一个数字序列，从M开始到N之前的整数结束，每个数之间以K为步长</span></span><br></pre></td></tr></table></figure><h4 id="字符串遍历循环"><a href="#字符串遍历循环" class="headerlink" title="字符串遍历循环"></a>字符串遍历循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure><ul><li>s是字符串，遍历字符串每个字符，产生循环</li></ul><h4 id="列表遍历循环"><a href="#列表遍历循环" class="headerlink" title="列表遍历循环"></a>列表遍历循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ls :</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure><ul><li>ls是一个列表，遍历其每个元素，产生循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> [<span class="number">123</span>,<span class="string">"PY"</span>,<span class="number">456</span>] :</span><br><span class="line">    <span class="built_in">print</span>(item,end=<span class="string">","</span>)</span><br><span class="line">    </span><br><span class="line"><span class="number">123</span>,PY,<span class="number">456</span>,</span><br></pre></td></tr></table></figure><h4 id="文件遍历循环"><a href="#文件遍历循环" class="headerlink" title="文件遍历循环"></a>文件遍历循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fi :</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure><ul><li>fi是一个文件标识符，遍历其每行，产生循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fi = <span class="built_in">open</span>(<span class="string">"C:/Users/BearKouber/Desktop/py/fi.txt"</span>,<span class="string">'r'</span>,encoding=<span class="string">'UTF-8'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fi :</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line"><span class="number">2022.5</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line">看完去洗脸刮胡子</span><br><span class="line"></span><br><span class="line">洗漱完毕去吃饭</span><br><span class="line"></span><br><span class="line">吃完饭去学校</span><br></pre></td></tr></table></figure><h3 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;条件&gt; :</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure><ul><li>反复执行语句块，直到条件不满足时结束</li></ul><h4 id="循环控制保留字break和continue"><a href="#循环控制保留字break和continue" class="headerlink" title="循环控制保留字break和continue"></a>循环控制保留字break和continue</h4><ul><li><code>break</code>跳出并结束当兵前整个循环，执行循环后的语句</li><li><code>continue</code>结束档次循环，继续执行后续次数循环</li></ul><p>例for</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">"Python"</span>:</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">"t"</span> :</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(c, end=<span class="string">""</span>)</span><br><span class="line">Pyhon</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">"Python"</span>:</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">"t"</span> :</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(c, end=<span class="string">""</span>)</span><br><span class="line">Py</span><br></pre></td></tr></table></figure><p>例while</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Python"</span></span><br><span class="line"><span class="keyword">while</span> s != <span class="string">""</span> :</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s :</span><br><span class="line">        <span class="built_in">print</span>(c, end=<span class="string">""</span>)</span><br><span class="line">    s = s[:-<span class="number">1</span>]</span><br><span class="line">PythonPythoPythPytPyP</span><br><span class="line">s = <span class="string">"Python"</span></span><br><span class="line"><span class="keyword">while</span> s != <span class="string">""</span> :</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s :</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">"t"</span>:</span><br><span class="line">            <span class="keyword">break</span>  <span class="comment">#此break仅跳出当前最内层循环即for循环</span></span><br><span class="line">       <span class="built_in">print</span>(c, end=<span class="string">""</span>)</span><br><span class="line">    s = s[:-<span class="number">1</span>]</span><br><span class="line">PyPyPyPyPyP</span><br></pre></td></tr></table></figure><h4 id="循环的扩展：else"><a href="#循环的扩展：else" class="headerlink" title="循环的扩展：else"></a>循环的扩展：else</h4><ul><li>执行break不执行else，无break执行则else执行</li></ul><p><strong>continue</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">"PYTHON"</span> :</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">"T"</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(c, end=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"正常退出"</span>)</span><br><span class="line">PYHON正常退出</span><br></pre></td></tr></table></figure><p><strong>break</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">"PYTHON"</span> :</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">"T"</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(c, end=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"正常退出"</span>)</span><br><span class="line">PY</span><br></pre></td></tr></table></figure><h2 id="random库"><a href="#random库" class="headerlink" title="random库"></a>random库</h2><ul><li>伪随机数：采用梅森旋转算法生成的(伪)随机序列中元素</li><li>random库主要用于生成随机数</li></ul><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>seed(a=None)</td><td>初始化给定的随机数种子，默认为当前系统时间</td></tr><tr><td>random()</td><td>生成一个[0.0,1.0]之间的随机小数</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">10</span>)</span><br><span class="line">random.random()</span><br><span class="line"><span class="number">0.5714025946899135</span></span><br><span class="line">random.random()</span><br><span class="line"><span class="number">0.4288890546751146</span></span><br></pre></td></tr></table></figure><p>不给种子的话，默认种子是调用random()函数所对应的时间</p><h4 id="为什么要给种子？"><a href="#为什么要给种子？" class="headerlink" title="为什么要给种子？"></a>为什么要给种子？</h4><p>编程中给出了随机种子下次在此运行程序，只要种子相同，那么产生的随机数也是相同的，可以再现系统运行的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">10</span>)</span><br><span class="line">random.random()</span><br><span class="line"><span class="number">0.5714025946899135</span></span><br><span class="line">random.seed(<span class="number">10</span>)</span><br><span class="line">random.random()</span><br><span class="line"><span class="number">0.5714025946899135</span></span><br></pre></td></tr></table></figure><h3 id="扩展随机数函数"><a href="#扩展随机数函数" class="headerlink" title="扩展随机数函数"></a>扩展随机数函数</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>randint(a,b)</td><td>生成一个[a,b]之间的整数</td></tr><tr><td>randrange(m,n,k)</td><td>生成一个[m,n]之间以k为步长的随机整数，k默认为1</td></tr><tr><td>getrandbits(k)</td><td>生成一个k比特长的随机整数</td></tr><tr><td>uniform(a,b)</td><td>生成一个[a,b]之间的随机小数</td></tr><tr><td>choice(seq)</td><td>从序列seq中随机选择一个元素</td></tr><tr><td>shuffle(seq)</td><td>将序列seq中元素随机排列，返回打乱后的序列</td></tr></tbody></table><p>如果在编写Python代码中非常必要把代码写在一行中，那么每行代码需要用<code>;</code>分开</p><h2 id="圆周率的计算"><a href="#圆周率的计算" class="headerlink" title="圆周率的计算"></a>圆周率的计算</h2><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.864ex" xmlns="http://www.w3.org/2000/svg" width="51.978ex" height="6.399ex" role="img" focusable="false" viewBox="0 -1562.5 22974.1 2828.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mo" transform="translate(847.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(1903.6,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(86,-1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(368.4,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3347.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mfrac" transform="translate(3625.6,0)"><g data-mml-node="mn" transform="translate(695.7,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msup" transform="translate(220,-843.8)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(1033,393.1) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><rect width="1651.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(5517,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(5906,0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(1341.7,676)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(1243.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2243.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="2943.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(3405.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(4405.9,0)"><g data-mml-node="mn" transform="translate(1341.7,676)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(1243.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2243.4,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><rect width="2943.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(7811.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(8811.8,0)"><g data-mml-node="mn" transform="translate(1341.7,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(1243.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2243.4,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g><rect width="2943.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(12217.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(13217.7,0)"><g data-mml-node="mn" transform="translate(1341.7,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(1243.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2243.4,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g><rect width="2943.4" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mo" transform="translate(22307.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(22696.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></p><h3 id="公式法"><a href="#公式法" class="headerlink" title="公式法"></a>公式法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CalPiV1.py</span></span><br><span class="line">pi = <span class="number">0</span></span><br><span class="line">N = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    pi += <span class="number">1</span>/<span class="built_in">pow</span>(<span class="number">16</span>,k)*( \</span><br><span class="line">              <span class="number">4</span>/(<span class="number">8</span>*k+<span class="number">1</span>) - <span class="number">2</span>/(<span class="number">8</span>*k+<span class="number">4</span>) - \</span><br><span class="line">              <span class="number">1</span>/(<span class="number">8</span>*k+<span class="number">5</span>) - <span class="number">1</span>/(<span class="number">8</span>*k+<span class="number">6</span>) ) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"圆周率值是: {}"</span>.<span class="built_in">format</span>(pi))</span><br><span class="line">圆周率值是: <span class="number">3.141592653589793</span></span><br></pre></td></tr></table></figure><ul><li>一行太长可以加斜杠<code>\</code>接着这一行写</li></ul><h3 id="蒙特卡罗方法"><a href="#蒙特卡罗方法" class="headerlink" title="蒙特卡罗方法"></a>蒙特卡罗方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CalPiV2.py</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> perf_counter</span><br><span class="line">DARTS = <span class="number">1000</span>*<span class="number">1000</span></span><br><span class="line">hits = <span class="number">0.0</span></span><br><span class="line">start = perf_counter()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, DARTS+<span class="number">1</span>):</span><br><span class="line">    x, y = random(), random()</span><br><span class="line">    dist = <span class="built_in">pow</span>(x ** <span class="number">2</span> + y ** <span class="number">2</span>, <span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">if</span> dist &lt;= <span class="number">1.0</span>:</span><br><span class="line">        hits = hits + <span class="number">1</span></span><br><span class="line">pi = <span class="number">4</span> * (hits/DARTS)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"圆周率值是: {}"</span>.<span class="built_in">format</span>(pi))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"运行时间是: {:.5f}s"</span>.<span class="built_in">format</span>(perf_counter() - start))</span><br><span class="line">圆周率值是: <span class="number">3.142936</span></span><br><span class="line">运行时间是: <span class="number">0.58529</span>s</span><br></pre></td></tr></table></figure><h1 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h1><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> &lt;函数名&gt;(<span class="params">&lt;参数(<span class="params"><span class="number">0</span>个或多个</span>)&gt;</span>):</span></span><br><span class="line">    &lt;函数体&gt;</span><br><span class="line">    <span class="keyword">return</span> &lt;返回值&gt;</span><br></pre></td></tr></table></figure><ul><li>函数定义时，所指定的参数是一种占位符</li><li>函数定义后，如果不经过调用，不会被执行</li><li>函数定义时，参数是输入、函数体是处理、结果是输出(IPO)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DayDayUpQ4.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dayUP</span>(<span class="params">df</span>):</span></span><br><span class="line">    dayup = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">365</span>):</span><br><span class="line">       <span class="keyword">if</span> i % <span class="number">7</span> <span class="keyword">in</span> [<span class="number">6</span>,<span class="number">0</span>]:</span><br><span class="line">           dayup = dayup*(<span class="number">1</span> - <span class="number">0.01</span>)</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           dayup = dayup*(<span class="number">1</span> + df)</span><br><span class="line">    <span class="keyword">return</span> dayup</span><br><span class="line">dayfactor = <span class="number">0.01</span></span><br><span class="line"><span class="keyword">while</span> dayUP(dayfactor) &lt; <span class="number">37.78</span>:</span><br><span class="line">    dayfactor += <span class="number">0.001</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"工作日的努力参数是：{:.3f} "</span>.<span class="built_in">format</span>(dayfactor))</span><br></pre></td></tr></table></figure><h2 id="可选参数传递"><a href="#可选参数传递" class="headerlink" title="可选参数传递"></a>可选参数传递</h2><p>函数定义时可以为某些参数指定默认值，构成可选参数</p><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p><strong>在设计和定义的时候，所有的可选参数要放非可选参数后</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span>(<span class="params">n, m=<span class="number">1</span></span>) :</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        s *=i</span><br><span class="line">    <span class="keyword">return</span> s//m</span><br></pre></td></tr></table></figure><p>如果给了第二个参数m那么就用给的参数值，如果没给的话就默认为<code>m=1</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fact(<span class="number">10</span>)</span><br><span class="line"><span class="number">3628800</span></span><br><span class="line">fact(<span class="number">10</span>,<span class="number">5</span>)</span><br><span class="line"><span class="number">725760</span></span><br></pre></td></tr></table></figure><h2 id="可变参数传递"><a href="#可变参数传递" class="headerlink" title="可变参数传递"></a>可变参数传递</h2><p>函数定义时可以设计可变数量参数，及不确定参数总数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> &lt;函数名&gt;(<span class="params">&lt;参数&gt;, *b</span>):</span></span><br><span class="line">    &lt;函数体&gt;</span><br><span class="line">    <span class="keyword">return</span> &lt;返回值&gt;</span><br><span class="line">*b及指不确定的n个参数，b可以换做其他变量名</span><br></pre></td></tr></table></figure><h3 id="计算n！"><a href="#计算n！" class="headerlink" title="计算n！"></a>计算n！</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span>(<span class="params">n, *b</span>) :</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        s *= i</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> b:</span><br><span class="line">        s *= item</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">fact(<span class="number">10</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">10886400</span></span><br><span class="line">fact(<span class="number">10</span>, <span class="number">3</span>, <span class="number">5</span> , <span class="number">8</span>)</span><br><span class="line"><span class="number">435456000</span></span><br></pre></td></tr></table></figure><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>函数可以返回0个或多个结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span>(<span class="params">n, m=<span class="number">1</span></span>) :</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        s *= i</span><br><span class="line">    <span class="keyword">return</span> s//m, n, m</span><br><span class="line">fact(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">(<span class="number">725760</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">a,b,c = fact(<span class="number">10</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br><span class="line"><span class="number">725760</span> <span class="number">10</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="全局变量与局部变量"><a href="#全局变量与局部变量" class="headerlink" title="全局变量与局部变量"></a>全局变量与局部变量</h2><p><strong>大致与c语言一致</strong></p><h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><p>在函数内使用global定义变量则此变量为全局变量</p><h3 id="此外"><a href="#此外" class="headerlink" title="此外"></a>此外</h3><ul><li><p>函数外定义的数组a，函数内如果也用同样变量名定义，那么函数内的数组变量为局部变量 </p></li><li><p>当然直接在函数内定义与外部变量名不一样的数组也为局部变量</p></li></ul><h2 id="lambda-不建议使用此方法定义函数"><a href="#lambda-不建议使用此方法定义函数" class="headerlink" title="lambda:不建议使用此方法定义函数"></a>lambda:不建议使用此方法定义函数</h2><ul><li><code>lambda</code>函数是一种匿名函数，即没有名字的函数</li><li>使用<code>lambda</code>保留字定义，函数名是返回结果</li><li><code>lambda</code>函数用于定义简单的，能够在一行内表示的函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;函数名&gt; = <span class="keyword">lambda</span> &lt;参数&gt;:&lt;表达式&gt;</span><br><span class="line"></span><br><span class="line">等价为</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> &lt;函数名&gt;(<span class="params">&lt;参数&gt;</span>):</span></span><br><span class="line">    &lt;函数体&gt;</span><br><span class="line">    <span class="keyword">return</span> &lt;返回值&gt;</span><br></pre></td></tr></table></figure><p><strong>例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x, y : x+y</span><br><span class="line">f(<span class="number">10</span>, <span class="number">15</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line">f = <span class="keyword">lambda</span> : <span class="string">"lambda函数"</span></span><br><span class="line"><span class="built_in">print</span>(f())</span><br><span class="line"><span class="keyword">lambda</span>函数</span><br></pre></td></tr></table></figure><h2 id="三目运算"><a href="#三目运算" class="headerlink" title="三目运算"></a>三目运算</h2><p>在python中，可以通过 <strong>同一行的if else语句</strong> 实现类似的三目运算(条件运算)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">True_statements <span class="keyword">if</span> expression <span class="keyword">else</span> False_statements</span><br></pre></td></tr></table></figure><ul><li>运算规则是：先对逻辑表达式 expression 求值，如果逻辑表达式返回 True，则 <strong>执行并返回 True_statements 的值</strong>；如果逻辑表达式返回 False，则执行并返回 False_statements 的值。</li></ul><h2 id="七段数码管绘制一"><a href="#七段数码管绘制一" class="headerlink" title="七段数码管绘制一"></a>七段数码管绘制一</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawLine</span>(<span class="params">draw</span>):</span>   <span class="comment">#绘制单段数码管</span></span><br><span class="line">    turtle.pendown() <span class="keyword">if</span> draw <span class="keyword">else</span> turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">40</span>)</span><br><span class="line">    turtle.right(<span class="number">90</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawDigit</span>(<span class="params">digit</span>):</span> <span class="comment">#根据数字绘制七段数码管</span></span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    turtle.left(<span class="number">90</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    turtle.left(<span class="number">180</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">20</span>) </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawDate</span>(<span class="params">date</span>):</span>  <span class="comment">#获得要输出的数字</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> date:</span><br><span class="line">        drawDigit(<span class="built_in">eval</span>(i))  <span class="comment">#通过eval()函数将数字变为整数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    turtle.setup(<span class="number">800</span>, <span class="number">350</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(-<span class="number">300</span>)</span><br><span class="line">    turtle.pensize(<span class="number">5</span>)</span><br><span class="line">    drawDate(<span class="string">'20181010'</span>)</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">    turtle.done()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="七段数码管版本二"><a href="#七段数码管版本二" class="headerlink" title="七段数码管版本二"></a>七段数码管版本二</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle, time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawGap</span>():</span> <span class="comment">#绘制数码管间隔</span></span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">5</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawLine</span>(<span class="params">draw</span>):</span>   <span class="comment">#绘制单段数码管</span></span><br><span class="line">    drawGap()</span><br><span class="line">    turtle.pendown() <span class="keyword">if</span> draw <span class="keyword">else</span> turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">40</span>)</span><br><span class="line">    drawGap()</span><br><span class="line">    turtle.right(<span class="number">90</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawDigit</span>(<span class="params">d</span>):</span> <span class="comment">#根据数字绘制七段数码管</span></span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    turtle.left(<span class="number">90</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> d <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    turtle.left(<span class="number">180</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">20</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawDate</span>(<span class="params">date</span>):</span></span><br><span class="line">    turtle.pencolor(<span class="string">"red"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> date:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">'-'</span>:</span><br><span class="line">            turtle.write(<span class="string">'年'</span>,font=(<span class="string">"Arial"</span>, <span class="number">18</span>, <span class="string">"normal"</span>))</span><br><span class="line">            turtle.pencolor(<span class="string">"green"</span>)</span><br><span class="line">            turtle.fd(<span class="number">40</span>)</span><br><span class="line">        <span class="keyword">elif</span> i == <span class="string">'='</span>:</span><br><span class="line">            turtle.write(<span class="string">'月'</span>,font=(<span class="string">"Arial"</span>, <span class="number">18</span>, <span class="string">"normal"</span>))</span><br><span class="line">            turtle.pencolor(<span class="string">"blue"</span>)</span><br><span class="line">            turtle.fd(<span class="number">40</span>)</span><br><span class="line">        <span class="keyword">elif</span> i == <span class="string">'+'</span>:</span><br><span class="line">            turtle.write(<span class="string">'日'</span>,font=(<span class="string">"Arial"</span>, <span class="number">18</span>, <span class="string">"normal"</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            drawDigit(<span class="built_in">eval</span>(i))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    turtle.setup(<span class="number">800</span>, <span class="number">350</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(-<span class="number">350</span>)</span><br><span class="line">    turtle.pensize(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#   drawDate('2018-10=10+')</span></span><br><span class="line">    drawDate(time.strftime(<span class="string">'%Y-%m=%d+'</span>,time.gmtime()))</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">    turtle.done()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="代码复用"><a href="#代码复用" class="headerlink" title="代码复用"></a>代码复用</h1><p><strong>函数和对象是代码复用的两种主要方式</strong></p><blockquote><p><strong>函数:将代码命名，在代码层面建立了初步抽象</strong></p><p><strong>对象:属性和方法，&lt;a&gt;.&lt;b&gt;和&lt;a&gt;.&lt;b&gt;()在函数之上再次组织进行抽象</strong></p></blockquote><blockquote><p><strong>那么我对此的看法是，这不就是java+c吗，有点东西啊我giao</strong></p></blockquote><h2 id="模块化设计"><a href="#模块化设计" class="headerlink" title="模块化设计"></a>模块化设计</h2><ul><li>通过函数或对象封装将程序划分为模块及模块间的表达</li><li>具体包括：主程序、子程序和子程序间的关系</li><li>分而治之：一种分而治之、分层抽象、体系化的设计思想</li></ul><h3 id="紧耦合-松耦合"><a href="#紧耦合-松耦合" class="headerlink" title="紧耦合 松耦合"></a>紧耦合 松耦合</h3><blockquote><p>第一次见到这个词还是在学习Java时候听某哥哥说的</p></blockquote><p><strong>简单来说便是</strong></p><ul><li>紧耦合：两个部分之间交流很多，无法独立存在</li><li>松耦合：两个部分之间交流很少，可以独立存在</li><li>模块内部紧耦合、模块之间松耦合</li></ul><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p><strong>两个关键特征</strong></p><ul><li>链条：计算过程存在递归链条</li><li><strong>基例：存在一个或多个不需要再次递归的基例</strong></li></ul><blockquote><p>基例，这个词我在网上除了CSDN上关于递归的文章之外没找到这个词语的解释，就离谱，不过找到英文为<strong>base case</strong>可能是翻译过来的</p></blockquote><h3 id="类似数学归纳法"><a href="#类似数学归纳法" class="headerlink" title="类似数学归纳法"></a>类似数学归纳法</h3><ul><li>证明当n取第一个值n1时命题成立</li><li>假设当nk时命题成立，证明当n=nk+1是命题也成立</li><li>递归是数学归纳法思维的编程体现</li></ul><blockquote><p>n后面跟的1、k、k+1都为下标，不方便打出来就这样表示</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="41.196ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 18208.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g><g data-mml-node="mo" transform="translate(1155.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(2211.6,0)"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mtable" transform="translate(500,0)"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mtext"><path data-c="A0" d=""></path></g><g data-mml-node="mtext" transform="translate(250,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mtext" transform="translate(750,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mtext" transform="translate(1000,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mtext" transform="translate(1250,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(1500,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mtext" transform="translate(2000,0)"><path data-c="A0" d=""></path></g></g><g data-mml-node="mtd" transform="translate(3250,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(2433.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(2683.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3283.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3672.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4494.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(5495,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5995,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6384,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g><g data-mml-node="mtext" transform="translate(6662,0)"><path data-c="A0" d=""></path></g></g><g data-mml-node="mtd" transform="translate(11162,0)"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(846,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(1422,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1888,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2339,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(3055,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3400,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(3869,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(15997,0) translate(0 250)"></g></g></g></g></svg></mjx-container></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> n*fact(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>函数+分支语句</strong></p><ul><li>递归本身是一个函数，需要函数定义方式描述</li><li>函数内部，采用分支语句对输入参数进行判断</li><li>基例和链条，分别编写对应代码</li></ul><p>上例当n=5时，执行该程序计算机会分配五块内存进行运算，感觉会内存就比较浪费</p><h3 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rvs</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">""</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> rvs(s[<span class="number">1</span>:])+s[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><p><strong>F(n) = F(n+1) + F(n-2)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> f(n-<span class="number">1</span>) + f(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanoi</span>(<span class="params">n, src, dst, mid</span>):</span></span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> : </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"{}:{}-&gt;{}"</span>.<span class="built_in">format</span>(<span class="number">1</span>,src,dst))</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        hanoi(n-<span class="number">1</span>, src, mid, dst)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"{}:{}-&gt;{}"</span>.<span class="built_in">format</span>(n,src,dst))</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        hanoi(n-<span class="number">1</span>, mid, dst, src)</span><br><span class="line"><span class="comment">#此处距离为三个圆盘，从A放入C中，B为过度</span></span><br><span class="line">hanoi(<span class="number">3</span>,<span class="string">"A"</span>,<span class="string">"C"</span>,<span class="string">"B"</span>)</span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><h3 id="分形几何"><a href="#分形几何" class="headerlink" title="分形几何"></a>分形几何</h3><ul><li>康托尔集、谢尔宾斯基三角形、门格海绵…</li><li>龙形曲线、空间填充曲线、科赫曲线…</li><li>函数递归的深入应用…</li></ul><h4 id="科赫曲线绘制源代码"><a href="#科赫曲线绘制源代码" class="headerlink" title="科赫曲线绘制源代码"></a>科赫曲线绘制源代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">koch</span>(<span class="params">size, n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        turtle.fd(size)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> angle <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">60</span>, -<span class="number">120</span>, <span class="number">60</span>]:</span><br><span class="line">           turtle.left(angle)</span><br><span class="line">           koch(size/<span class="number">3</span>, n-<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    turtle.setup(<span class="number">800</span>,<span class="number">400</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(-<span class="number">300</span>, -<span class="number">50</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.pensize(<span class="number">2</span>)</span><br><span class="line">    koch(<span class="number">600</span>,<span class="number">3</span>)     <span class="comment"># 0阶科赫曲线长度，阶数</span></span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h4 id="科赫雪花绘制源代码"><a href="#科赫雪花绘制源代码" class="headerlink" title="科赫雪花绘制源代码"></a>科赫雪花绘制源代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">koch</span>(<span class="params">size, n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        turtle.fd(size)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> angle <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">60</span>, -<span class="number">120</span>, <span class="number">60</span>]:</span><br><span class="line">           turtle.left(angle)</span><br><span class="line">           koch(size/<span class="number">3</span>, n-<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    turtle.setup(<span class="number">600</span>,<span class="number">600</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(-<span class="number">200</span>, <span class="number">100</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.pensize(<span class="number">2</span>)</span><br><span class="line">    level = <span class="number">3</span>      <span class="comment"># 3阶科赫雪花，阶数</span></span><br><span class="line">    koch(<span class="number">400</span>,level)     </span><br><span class="line">    turtle.right(<span class="number">120</span>)</span><br><span class="line">    koch(<span class="number">400</span>,level)</span><br><span class="line">    turtle.right(<span class="number">120</span>)</span><br><span class="line">    koch(<span class="number">400</span>,level)</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="安装pyinstaller库-第三方库"><a href="#安装pyinstaller库-第三方库" class="headerlink" title="安装pyinstaller库(第三方库)"></a>安装pyinstaller库(第三方库)</h1><ul><li><strong>cmd命令行</strong> <code>pip install pyinstaller</code></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>通过在命令行使用此库命令可以将python文件生成各种系统的可执行文件</p><ul><li><strong>cmd命令行</strong> <code>pyinstaller -F &lt;文件名.py&gt;</code></li><li>生成的文件包含三个文件夹，其中dist文件里面的便是生成的可执行文件</li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-h</td><td>查看帮助</td></tr><tr><td>–clean</td><td>清理打包过程中的临时文件</td></tr><tr><td>-D, –onedir</td><td>默认值，生成dist文件夹</td></tr><tr><td>-F, –onefile</td><td>在dist文件夹中只生成独立的打包文件</td></tr><tr><td>-i &lt;图标文件名.ico&gt;</td><td>制定打包程序使用的图标(icon)文件</td></tr></tbody></table><p><strong>举例：<code>pyinstaller -i &lt;文件名&gt;.ico -F &lt;文件名&gt;.py</code></strong></p><h1 id="python-的数据类型"><a href="#python-的数据类型" class="headerlink" title="python 的数据类型"></a>python 的数据类型</h1><blockquote><p>数值类型、字符串、元组、列表、字典、集合（不常用）</p></blockquote><p><strong>可变数据类型</strong></p><blockquote><p>可变数据类型：list（列表）、dict（字典）、set（集合，不常用）</p></blockquote><p><strong>不可变数据类型</strong></p><blockquote><p>不可变数据类型：数值类型（int、float、bool）、string（字符串）、tuple（元组）</p></blockquote><h2 id="组合数据类型"><a href="#组合数据类型" class="headerlink" title="组合数据类型"></a>组合数据类型</h2><blockquote><p>包括集合类型（集合）、序列类型（字符串、元组、列表）和映射类型（字典）</p></blockquote><h1 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h1><p><strong>集合是多个元素的无序组合</strong></p><ul><li>集合类型与数学中的集合概念一致</li><li>集合元素之间无序，每个元素唯一，不存在相同元素</li><li>集合元素不可更改，<strong>不能是可变数据类型</strong></li></ul><blockquote><p>集合元素独一无二，如果某个元素改变后与其他元素相同，会出现错误</p></blockquote><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><strong>集合用大括号{}表示，元素见用逗号分隔</strong></li><li>建立集合类型用{}或set()</li><li>建立空集合类型，必须使用set()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A = {<span class="string">"BearKouber"</span>, <span class="number">000</span>,(<span class="string">"BearKouebr"</span>, <span class="number">000</span>)}</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line">{<span class="number">0</span>, <span class="string">'BearKouber'</span>, (<span class="string">'BearKouebr'</span>, <span class="number">0</span>)}</span><br><span class="line">B = <span class="built_in">set</span>(<span class="string">"BearKouber123"</span>)</span><br><span class="line"><span class="built_in">print</span>(B)</span><br><span class="line">{<span class="string">'b'</span>, <span class="string">'K'</span>, <span class="string">'u'</span>, <span class="string">'B'</span>, <span class="string">'e'</span>, <span class="string">'r'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'a'</span>, <span class="string">'o'</span>, <span class="string">'1'</span>}</span><br><span class="line">C = {<span class="string">"bear"</span>,<span class="number">000</span>,<span class="string">"bear"</span>,<span class="number">000</span>}</span><br><span class="line"><span class="built_in">print</span>(C)</span><br><span class="line">{<span class="number">0</span>, <span class="string">'bear'</span>}</span><br></pre></td></tr></table></figure><h3 id="六个集合操作符"><a href="#六个集合操作符" class="headerlink" title="六个集合操作符"></a>六个集合操作符</h3><table><thead><tr><th>操作符及应用</th><th>描述</th></tr></thead><tbody><tr><td>S|T</td><td>返回一个新集合，包括在集合S和T中的所有元素</td></tr><tr><td>S-T</td><td>返回一个新集合，包括在集合S但不在T中的元素</td></tr><tr><td>S&amp;T</td><td>返回一个新集合，包括在同时在集合S和T中的元素</td></tr><tr><td>S^T</td><td>返回一个新集合，包括集合S和T中的非相同元素</td></tr><tr><td>S&lt;=T或S&lt;T</td><td>返回True/False，判断S和T的子集关系</td></tr><tr><td>S&gt;=T或S&gt;T</td><td>返回True/False，判断S和T的包含关系</td></tr></tbody></table><h3 id="集合的处理方法"><a href="#集合的处理方法" class="headerlink" title="集合的处理方法"></a>集合的处理方法</h3><table><thead><tr><th>操作函数或方法</th><th>描述</th></tr></thead><tbody><tr><td>S.add(x)</td><td>如果x不在集合S中,将x增加到S</td></tr><tr><td>S.discard(x)</td><td>移除S中的元素x,如果x不在集合S中,不报错</td></tr><tr><td>S.remove(x)</td><td>移除S中元素x,如果不在集合S中,产生KeyError异常</td></tr><tr><td>S.clear()</td><td>移除S中所有元素</td></tr><tr><td>S.pop()</td><td>随机返回S的一个元素,更新S,若S为空产生KeyError异常</td></tr><tr><td>S.copy()</td><td>返回集合S的一个副本</td></tr><tr><td>len(S)</td><td>返回集合S的元素个数</td></tr><tr><td>x in S</td><td>判断S中元素x,x在集合S中,返回True,否则返回False</td></tr><tr><td>x not in S</td><td>判断S中元素x,x不在集合S中.返回True,否则返回False</td></tr><tr><td>set(x)</td><td>将其他类型变量x转为集合类型</td></tr></tbody></table><p>此处KeyError异常可以通过try来进行异常处理</p><h3 id="无序"><a href="#无序" class="headerlink" title="无序"></a>无序</h3><p>因为集合元素无序,所以进行集合运算的输出结果也可能无序,但是其实集合定义后是有一个顺序的只不过程序员没法利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A = {<span class="string">"B"</span>,<span class="string">"E"</span>,<span class="number">00</span>}</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> A :</span><br><span class="line">    <span class="built_in">print</span>(item,end = <span class="string">""</span>)</span><br><span class="line">E0B</span><br></pre></td></tr></table></figure><h3 id="try和while进行集合输出"><a href="#try和while进行集合输出" class="headerlink" title="try和while进行集合输出"></a>try和while进行集合输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A = {<span class="string">"B"</span>,<span class="string">"E"</span>,<span class="number">00</span>}</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(A.pop(),end=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">E0B</span><br></pre></td></tr></table></figure><h3 id="判断元素是否在集合中"><a href="#判断元素是否在集合中" class="headerlink" title="判断元素是否在集合中"></a>判断元素是否在集合中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"p"</span> <span class="keyword">in</span> {<span class="string">"p"</span>,<span class="string">"y"</span>,<span class="number">123</span>}</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">{<span class="string">"p"</span>,<span class="string">"y"</span>} &gt;= {<span class="string">"p"</span>,<span class="string">"y"</span>,<span class="number">123</span>}</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="利用集合元素无重复进行数据去重"><a href="#利用集合元素无重复进行数据去重" class="headerlink" title="利用集合元素无重复进行数据去重"></a>利用集合元素无重复进行数据去重</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="string">"p"</span>,<span class="string">"p"</span>,<span class="string">"y"</span>,<span class="string">"y"</span>,<span class="number">123</span>]</span><br><span class="line">s = <span class="built_in">set</span>(ls)<span class="comment"># 可以理解为列表转集合</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">{<span class="string">'p'</span>, <span class="number">123</span>, <span class="string">'y'</span>}</span><br><span class="line">lt = <span class="built_in">list</span>(s)</span><br><span class="line"><span class="built_in">print</span>(lt)</span><br><span class="line">[<span class="string">'p'</span>, <span class="number">123</span>, <span class="string">'y'</span>]</span><br></pre></td></tr></table></figure><h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><blockquote><p>序列是具有先后关系的一组元素</p></blockquote><ul><li>序列是一维元素向量，元素类型可以不同</li><li>类似数学元素序列，元素序号正向递增</li><li>元素间由序号引导，通过下标访问序列的特定元素</li></ul><p><strong>序列是一个基本类型，其操作使用于字符串、元组、列表类型</strong></p><table><thead><tr><th>操作符及使用</th><th>描述</th></tr></thead><tbody><tr><td>x + t</td><td>连接两个序列x和t</td></tr><tr><td>n * s 或 s * n</td><td>将序列s赋值n次</td></tr><tr><td>x in s</td><td>如果x是序列s的字串，返回True，否则返回False</td></tr><tr><td>x not in s</td><td>如果x是序列s的字串，返回False，否则返回True</td></tr><tr><td>s[i]</td><td>索引，返回s中的第i个元素，i是序列的序号</td></tr><tr><td>s[i:j]或s[i:j:k]</td><td>切片，返回序列s中第i到j以k为步长的元素子序列</td></tr></tbody></table><h3 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h3><h3 id="函数-2"><a href="#函数-2" class="headerlink" title="函数"></a>函数</h3><p>跟字符串一样，可以使用<code>s[i:j:k]</code>令<code>k=-1</code>即可对序列取反</p><table><thead><tr><th>函数和方法</th><th>描述</th></tr></thead><tbody><tr><td>len(s)</td><td>返回序列s的长度</td></tr><tr><td>min(s)</td><td>返回序列s的最小元素，s中元素需要有可比性</td></tr><tr><td>max(x)</td><td>返回序列s的最大元素，s中元素需要有可比性</td></tr><tr><td>s.index(x)或s.index(x,i,j)</td><td>返回序列s从i开始到j位置中第一次出现元素x的位置</td></tr><tr><td>s.count(x)</td><td>返回序列s中出现x的总次数</td></tr></tbody></table><h4 id="字符串比较字符按照比较字符序"><a href="#字符串比较字符按照比较字符序" class="headerlink" title="字符串比较字符按照比较字符序"></a>字符串比较字符按照比较字符序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"BearKouber123"</span></span><br><span class="line"><span class="built_in">max</span>(s)</span><br><span class="line"><span class="string">'u'</span><span class="comment">#显然u的字母序最大</span></span><br></pre></td></tr></table></figure><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><blockquote><p>元组是序列类型的一种扩展</p></blockquote><ul><li><strong>元组是一种序列类型，一旦创建就不能被修改</strong></li><li>使用小括号<code>()</code>或<code>tuple()</code>创建，元素间用逗号，分隔</li><li>可以使用或不使用小括号</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">creature = <span class="string">"cat"</span>,<span class="string">"dog"</span>,<span class="string">"tiger "</span>,<span class="string">"human"</span></span><br><span class="line">creature</span><br><span class="line">(<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'tiger '</span>, <span class="string">'human'</span>) <span class="comment">#系统默认逗号分割的类型为元组类型</span></span><br><span class="line">color = (<span class="number">0x001100</span>,<span class="string">"bule"</span>,creature) <span class="comment">#此将用一个更大的元组类型将之包裹起来，详细看输出</span></span><br><span class="line">color</span><br><span class="line">(<span class="number">4352</span>, <span class="string">'bule'</span>, (<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'tiger '</span>, <span class="string">'human'</span>))</span><br><span class="line">color[-<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line"><span class="string">'tiger'</span></span><br></pre></td></tr></table></figure><h3 id="return返回多个值"><a href="#return返回多个值" class="headerlink" title="return返回多个值"></a>return返回多个值</h3><p>返回的值(如下面的1,2就)属于元组类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DNF</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li><strong>继承了序列全部的通用操作</strong></li><li>元组因为创建后不能修改，因此没有特殊操作</li><li>使用或不使用小括号</li></ul><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">creature = <span class="string">"cat"</span>,<span class="string">"dog"</span>,<span class="string">"tiger"</span>,<span class="string">"human"</span></span><br><span class="line">creature[::-<span class="number">1</span>]</span><br><span class="line">(<span class="string">'human'</span>, <span class="string">'tiger'</span>, <span class="string">'dog'</span>, <span class="string">'cat'</span>)</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><blockquote><p>列表是序列类型的一种扩展，十分常用</p></blockquote><ul><li>列表是一种序列类型，创建后可以随意被修改</li><li>使用方括号[]或list()创建，元素间用逗号,分隔</li><li>列表中个元素类型可以不同，无长度限制</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="string">"cat"</span>,<span class="string">"dog"</span>,<span class="string">"tiger"</span>,<span class="number">2077</span>]</span><br><span class="line">ls</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'tiger'</span>, <span class="number">2077</span>]</span><br><span class="line">lt = ls<span class="comment">#其实是把lt指向ls</span></span><br><span class="line">lt</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'tiger'</span>, <span class="number">2077</span>]</span><br></pre></td></tr></table></figure><p><strong>使用方括号[]或list才是真正创建了一个列表，赋值仅传递引用，相当于重新命名</strong></p><h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><table><thead><tr><th>函数或方法</th><th>描述</th></tr></thead><tbody><tr><td>ls[i] = x</td><td>替换列表ls第i元素为x</td></tr><tr><td>ls[i:j:k] = lt</td><td>用列表lt替换ls切片后对应元素子列表</td></tr><tr><td>del ls[i]</td><td>删除列表ls中第i元素</td></tr><tr><td>del ls[i:j:k]</td><td>删除列表ls中第i到第j以k为步长的元素</td></tr><tr><td>ls += lt</td><td>更新列表ls，将列表lt元素增加到列表ls中</td></tr><tr><td>ls *= n</td><td>更新列表ls，其元素重复n次</td></tr><tr><td>ls.append(x)</td><td>在列表ls最后增加一个元素x</td></tr><tr><td>ls.clear()</td><td>删除列表ls中所有的元素</td></tr><tr><td>ls.copy()</td><td>生产一个新列表，赋值ls中所有的元素</td></tr><tr><td>ls.insert(i,x)</td><td>在列表的第i位置增加元素x</td></tr><tr><td>ls.pop(i)</td><td>将列表ls中出现的第一个元素取出并删除该元素</td></tr><tr><td>ls.remove(x)</td><td>将列表ls中出现的第一个元素x删除</td></tr><tr><td>ls.reverse()</td><td>将列表ls中的元素反转</td></tr></tbody></table><h4 id="ls-i-j-k-lt"><a href="#ls-i-j-k-lt" class="headerlink" title="ls[i:j:k] = lt"></a>ls[i:j:k] = lt</h4><h4 id="ls-i-j-1"><a href="#ls-i-j-1" class="headerlink" title="ls[i:j:1]"></a>ls[i:j:1]</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="string">"cat"</span>,<span class="string">"dog"</span>,<span class="string">"tiger"</span>,<span class="number">2077</span>]</span><br><span class="line">lt = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">ls[::] = lt</span><br><span class="line"><span class="built_in">print</span>(ls)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h4 id="ls-i-j-1-1"><a href="#ls-i-j-1-1" class="headerlink" title="ls[i:j:-1]"></a>ls[i:j:-1]</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="string">"cat"</span>,<span class="string">"dog"</span>,<span class="string">"tiger"</span>,<span class="number">2077</span>]</span><br><span class="line">lt = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">ls[::-<span class="number">1</span>] = lt</span><br><span class="line"><span class="built_in">print</span>(ls)</span><br><span class="line">ValueError: attempt to assign sequence of size <span class="number">5</span> to extended <span class="built_in">slice</span> of size <span class="number">4</span></span><br><span class="line">    </span><br><span class="line">ls = [<span class="string">"cat"</span>,<span class="string">"dog"</span>,<span class="string">"tiger"</span>,<span class="number">2077</span>]</span><br><span class="line">lt = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">ls[::-<span class="number">1</span>] = lt</span><br><span class="line"><span class="built_in">print</span>(ls)</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="ls-i-j-2"><a href="#ls-i-j-2" class="headerlink" title="ls[i:j:2]"></a>ls[i:j:2]</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="string">"cat"</span>,<span class="string">"dog"</span>,<span class="string">"tiger"</span>,<span class="number">2077</span>]</span><br><span class="line">lt = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">ls[::<span class="number">2</span>] = lt</span><br><span class="line"><span class="built_in">print</span>(ls)</span><br><span class="line">ValueError: attempt to assign sequence of size <span class="number">4</span> to extended <span class="built_in">slice</span> of size <span class="number">2</span></span><br><span class="line">     </span><br><span class="line">ls = [<span class="string">"cat"</span>,<span class="string">"dog"</span>,<span class="string">"tiger"</span>,<span class="number">2077</span>]</span><br><span class="line">lt = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">ls[::<span class="number">2</span>] = lt</span><br><span class="line"><span class="built_in">print</span>(ls)</span><br><span class="line">[<span class="number">1</span>, <span class="string">'dog'</span>, <span class="number">2</span>, <span class="number">2077</span>]</span><br><span class="line"></span><br><span class="line">ls = [<span class="string">"cat"</span>,<span class="string">"dog"</span>,<span class="string">"tiger"</span>,<span class="number">2077</span>]</span><br><span class="line">lt = [<span class="number">1</span>]</span><br><span class="line">ls[::<span class="number">2</span>] = lt</span><br><span class="line"><span class="built_in">print</span>(ls)</span><br><span class="line">ValueError: attempt to assign sequence of size <span class="number">1</span> to extended <span class="built_in">slice</span> of size <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="remove，pop和del方法的区别"><a href="#remove，pop和del方法的区别" class="headerlink" title="remove，pop和del方法的区别"></a>remove，pop和del方法的区别</h4><h5 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h5><p>remove(item)方法是直接对可变序中的元素进行检索删除，返回的是删除后的列表,不返回删除值（返回None）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(list1.remove(<span class="number">3</span>)) <span class="comment">#对列表元素进行搜索删除，而不是下表</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><h5 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h5><p>pop(index)方法是对可变序列中元素下标进行检索删除，返回删除值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(list1.pop(<span class="number">3</span>))<span class="comment">#对列表下表进行检索删除</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="number">7</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><h5 id="del"><a href="#del" class="headerlink" title="del"></a>del</h5><p>del(list[index])方法是对可变序列中元素下边进行检索删除，不返回删除值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="keyword">del</span> list1[<span class="number">3</span>] <span class="comment">#或del(list1[3])</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><h2 id="序列类型应用场景"><a href="#序列类型应用场景" class="headerlink" title="序列类型应用场景"></a>序列类型应用场景</h2><ul><li>元组用于元素不改变的应用场景，更多用于固定搭配场景</li><li>列表更加灵活，它是最常用的序列类型</li><li>最重要作用：表示一组有序数据，进而操作它们</li></ul><h3 id="tuple-列表转化元组"><a href="#tuple-列表转化元组" class="headerlink" title="tuple() 列表转化元组"></a>tuple() 列表转化元组</h3><p><strong>这样后续怎么操作都不会改变此组的值，进行数据保护</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="string">"cat"</span>,<span class="string">"dog"</span>,<span class="string">"tiger"</span>,<span class="number">2077</span>]</span><br><span class="line">lt = <span class="built_in">tuple</span>(ls)</span><br><span class="line">lt</span><br><span class="line">(<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'tiger'</span>, <span class="number">2077</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;BearKouber的Python学习记录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单的笔记&lt;/p&gt;
&lt;h1 id=&quot;Python保留字&quot;&gt;&lt;a href=&quot;#Python保留字&quot; class=&quot;headerlink&quot; title=&quot;Python保留字&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
