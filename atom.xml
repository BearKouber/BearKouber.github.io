<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-28T12:45:39.212Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java学习笔记</title>
    <link href="http://example.com/2021/12/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/12/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-12-28T12:41:33.000Z</published>
    <updated>2021-12-28T12:45:39.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BearKouber的Java学习记录"><a href="#BearKouber的Java学习记录" class="headerlink" title="BearKouber的Java学习记录"></a>BearKouber的Java学习记录</h1><p>简单的笔记</p><h2 id="字符型（char）"><a href="#字符型（char）" class="headerlink" title="字符型（char）"></a>字符型（char）</h2><p>Java中是允许保存有中文的。</p><p>char最大的优势也就在于中文处理。</p><p>之所以在java语言里面可以使用char进行中文数据的保存，是因为java使用的是unicode这种十六进制的编码,这种编码的主要特点是可以包括任意的文字内容，所以使得程序开发更加的简单。</p><h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><p>布尔主要描述的是一种逻辑的处理结果。</p><p>Java的布尔类型的取值范围只有两个数据：true，false。</p><p>定义布尔型数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><h2 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h2><p>字符串之间可以通过 <code>+</code> 来进行连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">str = str + <span class="string">&quot; world&quot;</span>;</span><br><span class="line">str += <span class="string">&quot; !!!&quot;</span>;</span><br></pre></td></tr></table></figure><p>输出的<code>str</code>为<code>hello world !!!</code></p><p>在Java语言里面，数据范围大的数据类型与数据范围小的数据类型进行计算的时候，所有范围小的数据类型自动转型为范围大的数据类型，但是如果此时有String字符串了，则所有的类型无条件先变为String,如果有“+”表示的就是字符串连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">20.1</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line">String str = <span class="string">&quot;计算结果：&quot;</span> + x + y;</span><br></pre></td></tr></table></figure><p>输出的<code>str</code>为<code>计算结果：20.110</code></p><p>在描述字符串的时候也可以使用转义字符进行一些处理，例如:TAB ( t)、”(&quot;)、’(&#39;)、换行、( \n)、(\)。</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>·&amp;和|两个运算符可以进行位运算与逻辑运算；</p><p> |-在进行逻辑运算的时候所有的判断条件都要执行；</p><p> |-在进行位运算的时候只是针对于当前的数据进行与和或处理；</p><p>· 在逻辑运算上还可以使用&amp;&amp;、||；</p><p> |-&amp;&amp;:在若干个条件判断的时候，如果前面的条件返回了false,后续所有的条件都不再判断最终的结果就是false;</p><p> |-||：在若干个条件判断的时候，如果前面的条件返回了true,后续条件不再执行，最终就是true.</p><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//variable x = (expression) ? value if true : value if false</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> a , b;</span><br><span class="line">      a = <span class="number">10</span>;</span><br><span class="line">      <span class="comment">// 如果 a 等于 1 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">      b = (a == <span class="number">1</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">      System.out.println( <span class="string">&quot;Value of b is : &quot;</span> +  b );</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 如果 a 等于 10 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">      b = (a == <span class="number">10</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">      System.out.println( <span class="string">&quot;Value of b is : &quot;</span> + b );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Value of b is : <span class="number">30</span></span><br><span class="line">Value of b is : <span class="number">20</span></span><br></pre></td></tr></table></figure><h2 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符/"></a>instanceof 运算符/</h2><p>*该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( Object reference variable ) instanceof  (class/interface type)</span><br></pre></td></tr></table></figure><p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name = &quot;James&quot;;</span><br><span class="line">boolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真</span><br></pre></td></tr></table></figure><h2 id="Java运算符优先级"><a href="#Java运算符优先级" class="headerlink" title="Java运算符优先级"></a>Java运算符优先级</h2><table><thead><tr><th align="left">类别</th><th align="left">操作符</th><th align="left">关联性</th></tr></thead><tbody><tr><td align="left">后缀</td><td align="left">() [] . (点操作符)</td><td align="left">左到右</td></tr><tr><td align="left">一元</td><td align="left">expr++ expr–</td><td align="left">从左到右</td></tr><tr><td align="left">一元</td><td align="left">++expr –expr + - ～ ！</td><td align="left">从右到左</td></tr><tr><td align="left">乘性</td><td align="left">* /％</td><td align="left">左到右</td></tr><tr><td align="left">加性</td><td align="left">+ -</td><td align="left">左到右</td></tr><tr><td align="left">移位</td><td align="left">&gt;&gt; &gt;&gt;&gt;  &lt;&lt;</td><td align="left">左到右</td></tr><tr><td align="left">关系</td><td align="left">&gt; &gt;= &lt; &lt;=</td><td align="left">左到右</td></tr><tr><td align="left">相等</td><td align="left">== !=</td><td align="left">左到右</td></tr><tr><td align="left">按位与</td><td align="left">＆</td><td align="left">左到右</td></tr><tr><td align="left">按位异或</td><td align="left">^</td><td align="left">左到右</td></tr><tr><td align="left">按位或</td><td align="left">|</td><td align="left">左到右</td></tr><tr><td align="left">逻辑与</td><td align="left">&amp;&amp;</td><td align="left">左到右</td></tr><tr><td align="left">逻辑或</td><td align="left">| |</td><td align="left">左到右</td></tr><tr><td align="left">条件</td><td align="left">？：</td><td align="left">从右到左</td></tr><tr><td align="left">赋值</td><td align="left">= + = - = * = / =％= &gt;&gt; = &lt;&lt; =＆= ^ = | =</td><td align="left">从右到左</td></tr><tr><td align="left">逗号</td><td align="left">，</td><td align="left">左到右</td></tr></tbody></table><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(初始化; 布尔表达式; 更新) &#123;</span><br><span class="line">    //代码语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然所有循环结构都可以用 while 或者 do…while表示，但 Java 提供了另一种语句 —— for 循环，使一些循环结构变得更加简单。</p><p>for循环执行的次数是在执行前就确定的。语法格式如下：</p><p>for(初始化; 布尔表达式; 更新) {    //代码语句 }</p><p>关于 for 循环有以下几点说明：</p><ul><li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</li><li>然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。</li><li>执行一次循环后，更新循环控制变量。</li><li>再次检测布尔表达式。循环执行上面的过程。</li></ul><h2 id="java增强for循环"><a href="#java增强for循环" class="headerlink" title="java增强for循环"></a>java增强for循环</h2><p>Java5 引入了一种主要用于数组的增强型 for 循环。</p><p>Java 增强 for 循环语法格式如下:</p><p>for(声明语句 : 表达式) {   //代码句子 }</p><p><strong>声明语句：</strong>声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p><p><strong>表达式：</strong>表达式是要访问的数组名，或者是返回值为数组的方法。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h5 id="Test-java-文件代码："><a href="#Test-java-文件代码：" class="headerlink" title="Test.java 文件代码："></a>Test.java 文件代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> [] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> x : numbers )&#123;</span><br><span class="line">         System.out.print( x );</span><br><span class="line">         System.out.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      String [] names =&#123;<span class="string">&quot;James&quot;</span>, <span class="string">&quot;Larry&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Lacy&quot;</span>&#125;;</span><br><span class="line">      <span class="keyword">for</span>( String name : names ) &#123;</span><br><span class="line">         System.out.print( name );</span><br><span class="line">         System.out.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例编译运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10,20,30,40,50,</span><br><span class="line">James,Larry,Tom,Lacy,</span><br></pre></td></tr></table></figure><h2 id="break-关键字"><a href="#break-关键字" class="headerlink" title="break 关键字"></a>break 关键字</h2><p>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</p><p>break 跳出最里层的循环，并且继续执行该循环下面的语句。</p><h2 id="continue-关键字"><a href="#continue-关键字" class="headerlink" title="continue 关键字"></a>continue 关键字</h2><p>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</p><p>在 for 循环中，continue 语句使程序立即跳转到更新语句。</p><p>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。</p><h2 id="Java语言支持一些特殊的转义字符序列。"><a href="#Java语言支持一些特殊的转义字符序列。" class="headerlink" title="Java语言支持一些特殊的转义字符序列。"></a>Java语言支持一些特殊的转义字符序列。</h2><table><thead><tr><th align="left">符号</th><th align="left">字符含义</th></tr></thead><tbody><tr><td align="left">\n</td><td align="left">换行 (0x0a)</td></tr><tr><td align="left">\r</td><td align="left">回车 (0x0d)</td></tr><tr><td align="left">\f</td><td align="left">换页符(0x0c)</td></tr><tr><td align="left">\b</td><td align="left">退格 (0x08)</td></tr><tr><td align="left">\0</td><td align="left">空字符 (0x0)</td></tr><tr><td align="left">\s</td><td align="left">空格 (0x20)</td></tr><tr><td align="left">\t</td><td align="left">制表符</td></tr><tr><td align="left">&quot;</td><td align="left">双引号</td></tr><tr><td align="left">&#39;</td><td align="left">单引号</td></tr><tr><td align="left">\</td><td align="left">反斜杠</td></tr><tr><td align="left">\ddd</td><td align="left">八进制字符 (ddd)</td></tr><tr><td align="left">\uxxxx</td><td align="left">16进制Unicode字符 (xxxx)</td></tr></tbody></table><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="声明对象"><a href="#声明对象" class="headerlink" title="声明对象"></a>声明对象</h3><ul><li><p>声明并实例化对象：类名称 对象名称 = new 类名称();</p></li><li><p>分步骤完成：</p><ul><li><p>声明对象：类名称 对象名称 = null；</p></li><li><p>实例化对象：对象名称 = new 类名称()。</p></li></ul></li></ul><h3 id="类的调用"><a href="#类的调用" class="headerlink" title="类的调用"></a>类的调用</h3><ul><li><p>调用类中的属性：实例化对象.成员属性；</p></li><li><p>调用类中的方法：实例化对象.方法名称()。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名:&quot;</span>+ name +<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;年龄：&quot;</span>+ age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Person per = <span class="keyword">new</span> Person();</span><br><span class="line">        per.age=<span class="number">18</span>;</span><br><span class="line">        per.name = <span class="string">&quot;kouber&quot;</span>;</span><br><span class="line">        per.tell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">姓名:kouber</span><br><span class="line">年龄：<span class="number">18</span></span><br></pre></td></tr></table></figure><h3 id="使用this调用方法"><a href="#使用this调用方法" class="headerlink" title="使用this调用方法"></a>使用this调用方法</h3><p>除了调用属性之外，this也可以实现方法的调用，但是对于方法的调用就必须考虑构造与普通方法</p><ul><li>构造方法调用（this()）;使用关键字new实例化对象的时候才会调用构造方法；</li><li>普通方法调用（this.方法名称()）；实例化对象产生之后就可以调用普通方法</li></ul><h3 id="this调用本类方法"><a href="#this调用本类方法" class="headerlink" title="this调用本类方法"></a>this调用本类方法</h3><ul><li>构造方法必须在实例化新对象的时候调用，所以“this()”的语句只允许放在构造方法的首行</li><li>在构造方法中能调用普通方法，反过来普通方法不能调用构造方法；this()不能在普通方法中使用</li><li>构造方法互相调用时请保留有程序的出口，别形成死循环；</li></ul><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><h4 id="static属性可以有类名称直接调用"><a href="#static属性可以有类名称直接调用" class="headerlink" title="static属性可以有类名称直接调用"></a>static属性可以有类名称直接调用</h4><p><code>类名称.(static)属性 = （赋值）n</code></p><p>static属性虽然定义在类之中，但是其并不受到类实例化对象的控制。</p><p>static属性可以在没有实例化对象的时候使用，非static属性必须在实例化对象产生之后才可以使用</p><ul><li>考虑到公共信息储存的时候才会使用到static属性</li></ul><h4 id="static方法和非static方法调用上的限制"><a href="#static方法和非static方法调用上的限制" class="headerlink" title="static方法和非static方法调用上的限制"></a>static方法和非static方法调用上的限制</h4><ul><li>static方法只允许调用static属性或static方法</li><li>非static方法允许调用static属性或static方法</li></ul><p>所有的static定义的属性和方法都可以在没有实例化对象的前提下使用，而所有的非static定义的属性和方法必须要有实例化对象的情况下才可以使用</p><p>在static方法中调用非static方法可以通过对象来调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Demo().print() ; <span class="comment">// 此处Demo后需要加上括号</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;www.pintia.cn&quot;</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>static定义的方法或者是属性都不是在代码编写之初所需要考虑的内容，只有在回避实例化对象调用并且描述公共属性的情况下才会考虑static定义的方法或者是属性。</p><h3 id="Java程序逻辑控制：Swith开关语句"><a href="#Java程序逻辑控制：Swith开关语句" class="headerlink" title="Java程序逻辑控制：Swith开关语句"></a>Java程序逻辑控制：Swith开关语句</h3><p>与c语言不同的是Java里面的Switch语句能判断字符串(String)。</p><h3 id="简单Java类"><a href="#简单Java类" class="headerlink" title="简单Java类"></a>简单Java类</h3><p>核心开发结构如下：</p><ul><li>类名称一定要有意义，可以明确的描述某一类事物；</li><li>类之中的所有属性都<code>必须</code>使用private进行封装，同时封装后的属性必须要提供有setter、getter方法；</li><li>类之中可以提供有无数多个构造方法，但是必须要保留有无参构造方法</li><li>类之中不允许出现任何的输出语句，所有内容的获取必须返回</li><li>【非必须】可以提供有一个获取对象详细信息的方法，暂时将此方法名称定义为getInfo()</li></ul><p>新手代码练习要求以后打简单java类100%正确率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> deptno ;</span><br><span class="line">    <span class="keyword">private</span> String dname ;</span><br><span class="line">    <span class="keyword">private</span> String loc;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(<span class="keyword">long</span> deptno,String dname,String loc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno ;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname ;</span><br><span class="line">        <span class="keyword">this</span>.loc = loc ; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【部门信息】部门编号：&quot;</span> + <span class="keyword">this</span>.deptno + <span class="string">&quot;、部门名称 &quot;</span> + <span class="keyword">this</span>.dname + <span class="string">&quot;、部门位置 ：&quot;</span> + <span class="keyword">this</span>.loc ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(<span class="keyword">long</span> deptno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoc</span><span class="params">(String loc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loc = loc ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Dept dept = <span class="keyword">new</span> Dept(<span class="number">10</span>,<span class="string">&quot;技术部&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        System.out.println(dept.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>所有的关系运算返回的判断结果都是布尔型数据</p><p>尝试使用<code>int</code>型数据接收结果报错<code>boolean无法转换为int</code></p><h2 id="构造块"><a href="#构造块" class="headerlink" title="构造块"></a>构造块</h2><p>构造块会优先于构造方法执行，并且每一次实例化新对象的时候都会调用构造快中的代码。</p><h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><p>会优先与构造块执行，但有多个实例化对象出现时，静态代码块只会执行一次。</p><p>静态代码块的主要目的是静态属性的初始化。</p><p>静态代码块比主方法先执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;静态代码块：最高优先级&quot;</span>) ;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主方法代码块：执行次于静态代码块&quot;</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">执行结果：</span><br><span class="line">静态代码块：最高优先级</span><br><span class="line">主方法代码块：执行次于静态代码块</span><br></pre></td></tr></table></figure><h2 id="构造方法与匿名对象"><a href="#构造方法与匿名对象" class="headerlink" title="构造方法与匿名对象"></a>构造方法与匿名对象</h2><h3 id="构造方法：对类的对象的属性进行初始化"><a href="#构造方法：对类的对象的属性进行初始化" class="headerlink" title="构造方法：对类的对象的属性进行初始化"></a>构造方法：对类的对象的属性进行初始化</h3><p>可以通过构造方法实现实例化对象中的属性初始化处理</p><p>Java程序里面构造方法的定义要求如下：</p><ul><li>构造方法名称必须与类名称一致</li><li>构造方法不允许设置任何的返回值类型；即没有返回值定义</li><li>构造方法是在使用关键字new实例化对象的时候自动调用的</li></ul><p>类中一定会有一个构造方法，如果没有明确定义，系统会自动创建一个无参的构造方法</p><h3 id="构造方法如何使用"><a href="#构造方法如何使用" class="headerlink" title="构造方法如何使用"></a>构造方法如何使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span> <span class="params">(String t)</span></span>&#123;<span class="comment">//定义有参构造</span></span><br><span class="line">        title = t;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String t)</span> </span>&#123;</span><br><span class="line">        title = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;<span class="comment">//定义一个类</span></span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> <span class="params">(Message msg,<span class="keyword">int</span> a)</span></span>&#123; <span class="comment">//定义有参构造</span></span><br><span class="line">        name = msg.getTitle();<span class="comment">//为类中的属性赋值（初始化）</span></span><br><span class="line">        age = a;<span class="comment">//为类中的属性赋值（初始化）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Message(name + <span class="string">&quot; : &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span>+ name +<span class="string">&quot;、年龄：&quot;</span> + age);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; <span class="comment">//主类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Message msg = <span class="keyword">new</span> Message(<span class="string">&quot;mldn&quot;</span>);</span><br><span class="line">        Person per = <span class="keyword">new</span> Person(msg,<span class="number">20</span>);</span><br><span class="line">        msg = per.getInfo();</span><br><span class="line">        System.out.println(msg.getTitle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">mldn : <span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="匿名对象的使用"><a href="#匿名对象的使用" class="headerlink" title="匿名对象的使用"></a>匿名对象的使用</h3><p>用完直接扔</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;<span class="comment">//定义一个类</span></span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> <span class="params">(String name,<span class="keyword">int</span> a)</span></span>&#123; <span class="comment">//定义有参构造</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;<span class="comment">//为类中的属性赋值（初始化）</span></span><br><span class="line">        age = a;<span class="comment">//为类中的属性赋值（初始化）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span>+ name +<span class="string">&quot;、年龄：&quot;</span> + age);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">&quot;Kouber&quot;</span>，<span class="number">18</span>).tell;<span class="comment">//进行方法的调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">姓名：Kouber、年龄：<span class="number">18</span></span><br></pre></td></tr></table></figure><p>此对象没有引用，使用后会变成垃圾，所有的垃圾将被GC进行回收与释放</p><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>当方法名称相同，参数的类型或个数不同的时候就称为方法重载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> resultA = sum(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">int</span> resultB = sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">        <span class="keyword">double</span> resultC = sum(<span class="number">10.2</span>,<span class="number">20.3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;resultA=&quot;</span>+resultA);</span><br><span class="line">        System.out.println(<span class="string">&quot;resultB=&quot;</span>+resultB);</span><br><span class="line">        System.out.println(<span class="string">&quot;resultC=&quot;</span>+resultC);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y + z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现同一个方法名称但是可以根据调用时传递的不同参数的类型或个数实现不同方法体的调用，这样就实现了方法重载的定义。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义语法"><a href="#定义语法" class="headerlink" title="定义语法"></a>定义语法</h3><ul><li>数组的动态初始化，初始化之后数组每一个元素的保存内容为其对应数据类型的默认值<ul><li>声明并初始化数组：<ul><li>数据类型 数组名称 [] = new 数据类型 [长度] ；</li><li>数据类型 [] 数组名称 = new 数据类型 [长度] ；</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a [] = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">10</span>] ;</span><br><span class="line">        <span class="keyword">int</span> [] b = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">10</span>] ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数组的静态初始化：在数组定义的时候就为其设置好了里面的内容：<ul><li>简化格式：数据类型 数组名称 [] = {数据类型 1，数据类型 2，数据类型 3，···};</li><li>完整格式：数据类型 数组名称 [] = <strong>new 数据类型 [] {数据类型 1，数据类型 2，数据类型 3，···}</strong>; (黑体部分：匿名数组)</li><li>老师强烈建议用完整格式进行数组的初始化</li></ul></li></ul><p>当使用数组下标超出数组范围时候，程序编译会有此报错</p><p><strong>ArrayIndexOutOfBoundsException</strong></p><p>意味数组越界</p><h3 id="求数组长度：-数组名-length"><a href="#求数组长度：-数组名-length" class="headerlink" title="求数组长度： 数组名.length"></a>求数组长度： 数组名.length</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] data = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>] ;</span><br><span class="line">        System.out.print(data.length) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">结果输出：</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="增强型for循环：foreach（迭代输出）"><a href="#增强型for循环：foreach（迭代输出）" class="headerlink" title="增强型for循环：foreach（迭代输出）"></a>增强型for循环：foreach（迭代输出）</h3><p><em>利用foreach的语法结构可以直接自动获取数组中的每一个元素，避免下标访问</em></p><p><code>for(数据类型 变量 : 数组 | 集合) &#123;&#125;</code></p><p>可以自动将数组中的每一个元素的内容取出保存在变量里面，这样就能直接通过变量获取内容避免使用下标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Demo &#123;</span><br><span class="line">public static void main(String args[]) &#123;</span><br><span class="line">int [] data = new int [] &#123;1,2,3,4,5&#125; ;</span><br><span class="line">for (int temp : data) &#123;</span><br><span class="line">System.out.print(temp) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">12345</span><br></pre></td></tr></table></figure><h3 id="引用数据类型内存分析（数组）"><a href="#引用数据类型内存分析（数组）" class="headerlink" title="引用数据类型内存分析（数组）"></a>引用数据类型内存分析（数组）</h3><p>引用数据类型：必须在为之开辟了堆内存空间之后才可以使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] data = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125; ; <span class="comment">//静态初始化</span></span><br><span class="line">        <span class="keyword">int</span> [] temp = data ; <span class="comment">//引用传递</span></span><br><span class="line">        temp [<span class="number">0</span>] = <span class="number">100</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; data.length ; x++) &#123;</span><br><span class="line">            System.out.print(data[x] ) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">100</span> <span class="number">20</span> <span class="number">30</span> </span><br></pre></td></tr></table></figure><p>new的出现创建了新的堆内存空间，而data储存在栈内存中（data中的数据储存在堆内存中，data在栈中储存的是他的数据的地址即堆内存的地址），temp引用传递即为另一栈内存指向了data指向的堆内存地址即data的数据地址，从而改动temp数据就会改动data的数据。</p><p>两者的数据本质上是同一个堆内存里面的数据</p><p><em>由于数组属于引用类型，所以一定要为其开辟堆内存空间之后才可以使用，如果现在使用了未开辟空间的数组，会出现<strong>NullPointerException</strong>（数组）</em></p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main &#123;</span><br><span class="line">        <span class="keyword">int</span> [] data = <span class="keyword">null</span> ;</span><br><span class="line">        System.out.print(data[<span class="number">0</span>]) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">正常编译</span><br><span class="line">但是运行会出现**NullPointerException**报错</span><br></pre></td></tr></table></figure><p>因此：数组必须提供有实例化对象才可与使用数组的操作形式进行数组的操作</p><h3 id="方法传递数组"><a href="#方法传递数组" class="headerlink" title="方法传递数组"></a>方法传递数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> data [] = initArray();</span><br><span class="line">        printArray(data);<span class="comment">//传递数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> [] initArray() &#123;</span><br><span class="line">        <span class="keyword">int</span> arr [] = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> arr;<span class="comment">//返回一个数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//要求接受一个int型的数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> temp [])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; temp.length ; x++)&#123;</span><br><span class="line">            System.out.print(temp[x]、) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">1</span>、<span class="number">2</span>、<span class="number">3</span>、<span class="number">4</span>、<span class="number">5</span>、</span><br></pre></td></tr></table></figure><p>如果程序代码都是通过主方法完成的，就不符合面向对象的设计结构，最好是设计一个类来实现此程序代码</p><p>类中没有属性存在的意义，就没有必要定义普通方法了，普通方法还需要实例化对象，因此直接定义类（静态）方法就行。</p><p>如下将一些操作和计算封装从而使主类更加简便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayUtil</span> </span>&#123; <span class="comment">// 是一个操作工具的类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sum ;<span class="comment">//保存总和</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> avg ;<span class="comment">//保存平均值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> max ;<span class="comment">//保存最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> min ;<span class="comment">//保存最小值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayUtil</span><span class="params">(<span class="keyword">int</span> data[])</span> </span>&#123;<span class="comment">//进行数组计算</span></span><br><span class="line">        <span class="keyword">this</span>.max = data[<span class="number">0</span>] ;<span class="comment">//假设第一位最大</span></span><br><span class="line">        <span class="keyword">this</span>.min = data[<span class="number">0</span>] ;<span class="comment">//假设第一位最小</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; data.length ; x++) &#123;<span class="comment">//max、min地位改变</span></span><br><span class="line">            <span class="keyword">if</span>(data[x] &gt; max) &#123;</span><br><span class="line">                <span class="keyword">this</span>.max = data[x];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(data[x] &lt; min) &#123;</span><br><span class="line">                <span class="keyword">this</span>.min = data[x] ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.sum += data[x] ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.avg = sum / data.length ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getAvg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.avg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> data [] = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125; ;</span><br><span class="line">        ArrayUtil util = <span class="keyword">new</span> ArrayUtil(data) ;</span><br><span class="line">        System.out.println(<span class="string">&quot;数组总和：&quot;</span>+util.getSum()) ;</span><br><span class="line">        System.out.println(<span class="string">&quot;数组平均值：&quot;</span>+util.getAvg()) ;</span><br><span class="line">        System.out.println(<span class="string">&quot;数组最大值：&quot;</span>+util.getMax()) ;</span><br><span class="line">        System.out.println(<span class="string">&quot;数组最小值：&quot;</span>+util.getMin()) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">数组总和：<span class="number">15</span></span><br><span class="line">数组平均值：<span class="number">3.0</span></span><br><span class="line">数组最大值：<span class="number">5</span></span><br><span class="line">数组最小值：<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><h4 id="定义语法-1"><a href="#定义语法-1" class="headerlink" title="定义语法"></a>定义语法</h4><ul><li><p>数组的动态初始化：</p><ul><li>数据类型 数组名称 [][] [] [] = new 数据类型 [行个数] [列个数] ;</li></ul></li><li><p>数组的静态初始化：</p><ul><li>数据类型 数组名称 [] [] = new 数据类型 [] [] { {数据，数据，···},{数据，数据，···} } ;</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] [] data = <span class="keyword">new</span> <span class="keyword">int</span> [] [] &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125; &#125; ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; data.length ; x ++) &#123; <span class="comment">//这里的data.length = 3 </span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span> ;y &lt; data[x].length ; y ++)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;data[&quot;</span>+x+<span class="string">&quot;][&quot;</span>+y+<span class="string">&quot;]=&quot;</span>+data[x][y]) ;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println() ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">data[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">data[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">2</span></span><br><span class="line">data[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">3</span></span><br><span class="line">data[<span class="number">0</span>][<span class="number">3</span>]=<span class="number">4</span></span><br><span class="line">data[<span class="number">0</span>][<span class="number">4</span>]=<span class="number">5</span></span><br><span class="line"></span><br><span class="line">data[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">data[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">2</span></span><br><span class="line">data[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">3</span></span><br><span class="line"></span><br><span class="line">data[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">5</span></span><br><span class="line">data[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">6</span></span><br><span class="line">data[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">7</span></span><br><span class="line">data[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">8</span></span><br></pre></td></tr></table></figure><p>使用foreach输出该二维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] [] data = <span class="keyword">new</span> <span class="keyword">int</span> [] [] &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125; &#125; ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> temp [] : data) &#123; <span class="comment">//这里的data.length = 3 </span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> num : temp)&#123;</span><br><span class="line">                System.out.print(num + <span class="string">&quot;、&quot;</span>) ;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println() ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">1</span>、<span class="number">2</span>、<span class="number">3</span>、<span class="number">4</span>、<span class="number">5</span>、</span><br><span class="line"><span class="number">1</span>、<span class="number">2</span>、<span class="number">3</span>、</span><br><span class="line"><span class="number">5</span>、<span class="number">6</span>、<span class="number">7</span>、<span class="number">8</span>、</span><br></pre></td></tr></table></figure><p>通过foreach可以看出，二维数组就是数组的嵌套使用</p><h3 id="方法可变参数"><a href="#方法可变参数" class="headerlink" title="方法可变参数"></a>方法可变参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> [] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> temp : data) &#123;</span><br><span class="line">            sum += temp ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        System.out.print(ArrayUtil.sum(<span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)) ;</span><br><span class="line">    <span class="comment">//上面如果是这样(new [] int &#123;1,2,3&#125;) ;则会出现报错</span></span><br><span class="line">        <span class="comment">//错误: 需要&lt;标识符&gt; System.out.println(ArrayUtil.sum(new^(此处标出错误)[] int &#123;1,2,3&#125;)) ;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> ... data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> temp : data) &#123;</span><br><span class="line">            sum += temp ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        System.out.printl(ArrayUtil.sum(<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>)) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>可变参数的最大作用在于，在以后进行一些程序设计或者开发者调用的时候，利用此种形式避免数组的传递操作。</p><p>可变参数的本质还是数组。</p><h3 id="数组相关类库"><a href="#数组相关类库" class="headerlink" title="数组相关类库"></a>数组相关类库</h3><p>数组排序：*java.until.Arrays.sort(数组名称);*（升序）</p><p>数组拷贝：<em>System.arraycopy(原数组，原数组开始点，目标数组，目标数组开始点，拷贝长度);</em></p><h3 id="堆栈内存"><a href="#堆栈内存" class="headerlink" title="堆栈内存"></a>堆栈内存</h3><ul><li>堆内存：保存的是对象的具体信息，在程序之中堆内存空间的开辟是通过new完成的。</li><li>栈内存：保存的是一块对内存的地址，即：通过地址找到堆内存，然后找到对象内容</li></ul><p>对象必须实例化之后才能使用否则无法使用</p><h2 id="java输入方式"><a href="#java输入方式" class="headerlink" title="java输入方式"></a>java输入方式</h2><h3 id="一、从键盘获取不限制长度的数组"><a href="#一、从键盘获取不限制长度的数组" class="headerlink" title="一、从键盘获取不限制长度的数组"></a>一、从键盘获取不限制长度的数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入几个数并用逗号隔开:&quot;</span>);</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//从键盘接收数据</span></span><br><span class="line">        String str = sc.next().toString();<span class="comment">//next()方式接收字符串</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">        String [] arr  = str.split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;arr.length;j++) &#123;</span><br><span class="line">          System.out.print(arr[j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二、从键盘获取限制长度的数组"><a href="#二、从键盘获取限制长度的数组" class="headerlink" title="二、从键盘获取限制长度的数组"></a>二、从键盘获取限制长度的数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputArrayLimitLength</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入&quot;</span>+n+<span class="string">&quot;个数：&quot;</span>);</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span>[] b=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.length;i++)&#123;</span><br><span class="line">b[i]=sc.nextInt();</span><br><span class="line">System.out.print(<span class="string">&quot; &quot;</span> + b[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BearKouber的Java学习记录&quot;&gt;&lt;a href=&quot;#BearKouber的Java学习记录&quot; class=&quot;headerlink&quot; title=&quot;BearKouber的Java学习记录&quot;&gt;&lt;/a&gt;BearKouber的Java学习记录&lt;/h1&gt;&lt;p&gt;简单</summary>
      
    
    
    
    
  </entry>
  
</feed>
